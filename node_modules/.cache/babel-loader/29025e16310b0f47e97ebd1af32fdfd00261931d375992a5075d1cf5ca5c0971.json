{"ast":null,"code":"'use strict';\n\nvar parser = require('note-parser');\n\n/**\n * Create a Soundfont object\n *\n * @param {AudioContext} context - the [audio context](https://developer.mozilla.org/en/docs/Web/API/AudioContext)\n * @param {Function} nameToUrl - (Optional) a function that maps the sound font name to the url\n * @return {Soundfont} a soundfont object\n */\nfunction Soundfont(ctx, nameToUrl) {\n  console.warn('new Soundfont() is deprected');\n  console.log('Please use Soundfont.instrument() instead of new Soundfont().instrument()');\n  if (!(this instanceof Soundfont)) return new Soundfont(ctx);\n  this.nameToUrl = nameToUrl || Soundfont.nameToUrl;\n  this.ctx = ctx;\n  this.instruments = {};\n  this.promises = [];\n}\nSoundfont.prototype.onready = function (callback) {\n  console.warn('deprecated API');\n  console.log('Please use Promise.all(Soundfont.instrument(), Soundfont.instrument()).then() instead of new Soundfont().onready()');\n  Promise.all(this.promises).then(callback);\n};\nSoundfont.prototype.instrument = function (name, options) {\n  console.warn('new Soundfont().instrument() is deprecated.');\n  console.log('Please use Soundfont.instrument() instead.');\n  var ctx = this.ctx;\n  name = name || 'default';\n  if (name in this.instruments) return this.instruments[name];\n  var inst = {\n    name: name,\n    play: oscillatorPlayer(ctx, options)\n  };\n  this.instruments[name] = inst;\n  if (name !== 'default') {\n    var promise = Soundfont.instrument(ctx, name, options).then(function (instrument) {\n      inst.play = instrument.play;\n      return inst;\n    });\n    this.promises.push(promise);\n    inst.onready = function (cb) {\n      console.warn('onready is deprecated. Use Soundfont.instrument().then()');\n      promise.then(cb);\n    };\n  } else {\n    inst.onready = function (cb) {\n      console.warn('onready is deprecated. Use Soundfont.instrument().then()');\n      cb();\n    };\n  }\n  return inst;\n};\n\n/*\n * Load the buffers of a given instrument name. It returns a promise that resolves\n * to a hash with midi note numbers as keys, and audio buffers as values.\n *\n * @param {AudioContext} ac - the audio context\n * @param {String} name - the instrument name (it accepts an url if starts with \"http\")\n * @param {Object} options - (Optional) options object\n * @return {Promise} a promise that resolves to a Hash of { midiNoteNum: <AudioBuffer> }\n *\n * The options object accepts the following keys:\n *\n * - nameToUrl {Function}: a function to convert from instrument names to urls.\n * By default it uses Benjamin Gleitzman's package of\n * [pre-rendered sound fonts](https://github.com/gleitz/midi-js-soundfonts)\n * - notes {Array}: the list of note names to be decoded (all by default)\n *\n * @example\n * var Soundfont = require('soundfont-player')\n * Soundfont.loadBuffers(ctx, 'acoustic_grand_piano').then(function(buffers) {\n *  buffers[60] // => An <AudioBuffer> corresponding to note C4\n * })\n */\nfunction loadBuffers(ac, name, options) {\n  console.warn('Soundfont.loadBuffers is deprecate.');\n  console.log('Use Soundfont.instrument(..) and get buffers properties from the result.');\n  return Soundfont.instrument(ac, name, options).then(function (inst) {\n    return inst.buffers;\n  });\n}\nSoundfont.loadBuffers = loadBuffers;\n\n/**\n * Returns a function that plays an oscillator\n *\n * @param {AudioContext} ac - the audio context\n * @param {Hash} defaultOptions - (Optional) a hash of options:\n * - vcoType: the oscillator type (default: 'sine')\n * - gain: the output gain value (default: 0.4)\n  * - destination: the player destination (default: ac.destination)\n */\nfunction oscillatorPlayer(ctx, defaultOptions) {\n  defaultOptions = defaultOptions || {};\n  return function (note, time, duration, options) {\n    console.warn('The oscillator player is deprecated.');\n    console.log('Starting with version 0.9.0 you will have to wait until the soundfont is loaded to play sounds.');\n    var midi = note > 0 && note < 129 ? +note : parser.midi(note);\n    var freq = midi ? parser.midiToFreq(midi, 440) : null;\n    if (!freq) return;\n    duration = duration || 0.2;\n    options = options || {};\n    var destination = options.destination || defaultOptions.destination || ctx.destination;\n    var vcoType = options.vcoType || defaultOptions.vcoType || 'sine';\n    var gain = options.gain || defaultOptions.gain || 0.4;\n    var vco = ctx.createOscillator();\n    vco.type = vcoType;\n    vco.frequency.value = freq;\n\n    /* VCA */\n    var vca = ctx.createGain();\n    vca.gain.value = gain;\n\n    /* Connections */\n    vco.connect(vca);\n    vca.connect(destination);\n    vco.start(time);\n    if (duration > 0) vco.stop(time + duration);\n    return vco;\n  };\n}\n\n/**\n * Given a note name, return the note midi number\n *\n * @name noteToMidi\n * @function\n * @param {String} noteName\n * @return {Integer} the note midi number or null if not a valid note name\n */\nSoundfont.noteToMidi = parser.midi;\nmodule.exports = Soundfont;","map":{"version":3,"names":["parser","require","Soundfont","ctx","nameToUrl","console","warn","log","instruments","promises","prototype","onready","callback","Promise","all","then","instrument","name","options","inst","play","oscillatorPlayer","promise","push","cb","loadBuffers","ac","buffers","defaultOptions","note","time","duration","midi","freq","midiToFreq","destination","vcoType","gain","vco","createOscillator","type","frequency","value","vca","createGain","connect","start","stop","noteToMidi","module","exports"],"sources":["/Users/macbook/Desktop/Music/OwnGuitar/node_modules/soundfont-player/lib/legacy.js"],"sourcesContent":["'use strict'\n\nvar parser = require('note-parser')\n\n/**\n * Create a Soundfont object\n *\n * @param {AudioContext} context - the [audio context](https://developer.mozilla.org/en/docs/Web/API/AudioContext)\n * @param {Function} nameToUrl - (Optional) a function that maps the sound font name to the url\n * @return {Soundfont} a soundfont object\n */\nfunction Soundfont (ctx, nameToUrl) {\n  console.warn('new Soundfont() is deprected')\n  console.log('Please use Soundfont.instrument() instead of new Soundfont().instrument()')\n  if (!(this instanceof Soundfont)) return new Soundfont(ctx)\n\n  this.nameToUrl = nameToUrl || Soundfont.nameToUrl\n  this.ctx = ctx\n  this.instruments = {}\n  this.promises = []\n}\n\nSoundfont.prototype.onready = function (callback) {\n  console.warn('deprecated API')\n  console.log('Please use Promise.all(Soundfont.instrument(), Soundfont.instrument()).then() instead of new Soundfont().onready()')\n  Promise.all(this.promises).then(callback)\n}\n\nSoundfont.prototype.instrument = function (name, options) {\n  console.warn('new Soundfont().instrument() is deprecated.')\n  console.log('Please use Soundfont.instrument() instead.')\n  var ctx = this.ctx\n  name = name || 'default'\n  if (name in this.instruments) return this.instruments[name]\n  var inst = {name: name, play: oscillatorPlayer(ctx, options)}\n  this.instruments[name] = inst\n  if (name !== 'default') {\n    var promise = Soundfont.instrument(ctx, name, options).then(function (instrument) {\n      inst.play = instrument.play\n      return inst\n    })\n    this.promises.push(promise)\n    inst.onready = function (cb) {\n      console.warn('onready is deprecated. Use Soundfont.instrument().then()')\n      promise.then(cb)\n    }\n  } else {\n    inst.onready = function (cb) {\n      console.warn('onready is deprecated. Use Soundfont.instrument().then()')\n      cb()\n    }\n  }\n  return inst\n}\n\n/*\n * Load the buffers of a given instrument name. It returns a promise that resolves\n * to a hash with midi note numbers as keys, and audio buffers as values.\n *\n * @param {AudioContext} ac - the audio context\n * @param {String} name - the instrument name (it accepts an url if starts with \"http\")\n * @param {Object} options - (Optional) options object\n * @return {Promise} a promise that resolves to a Hash of { midiNoteNum: <AudioBuffer> }\n *\n * The options object accepts the following keys:\n *\n * - nameToUrl {Function}: a function to convert from instrument names to urls.\n * By default it uses Benjamin Gleitzman's package of\n * [pre-rendered sound fonts](https://github.com/gleitz/midi-js-soundfonts)\n * - notes {Array}: the list of note names to be decoded (all by default)\n *\n * @example\n * var Soundfont = require('soundfont-player')\n * Soundfont.loadBuffers(ctx, 'acoustic_grand_piano').then(function(buffers) {\n *  buffers[60] // => An <AudioBuffer> corresponding to note C4\n * })\n */\nfunction loadBuffers (ac, name, options) {\n  console.warn('Soundfont.loadBuffers is deprecate.')\n  console.log('Use Soundfont.instrument(..) and get buffers properties from the result.')\n  return Soundfont.instrument(ac, name, options).then(function (inst) {\n    return inst.buffers\n  })\n}\nSoundfont.loadBuffers = loadBuffers\n\n/**\n * Returns a function that plays an oscillator\n *\n * @param {AudioContext} ac - the audio context\n * @param {Hash} defaultOptions - (Optional) a hash of options:\n * - vcoType: the oscillator type (default: 'sine')\n * - gain: the output gain value (default: 0.4)\n  * - destination: the player destination (default: ac.destination)\n */\nfunction oscillatorPlayer (ctx, defaultOptions) {\n  defaultOptions = defaultOptions || {}\n  return function (note, time, duration, options) {\n    console.warn('The oscillator player is deprecated.')\n    console.log('Starting with version 0.9.0 you will have to wait until the soundfont is loaded to play sounds.')\n    var midi = note > 0 && note < 129 ? +note : parser.midi(note)\n    var freq = midi ? parser.midiToFreq(midi, 440) : null\n    if (!freq) return\n\n    duration = duration || 0.2\n\n    options = options || {}\n    var destination = options.destination || defaultOptions.destination || ctx.destination\n    var vcoType = options.vcoType || defaultOptions.vcoType || 'sine'\n    var gain = options.gain || defaultOptions.gain || 0.4\n\n    var vco = ctx.createOscillator()\n    vco.type = vcoType\n    vco.frequency.value = freq\n\n    /* VCA */\n    var vca = ctx.createGain()\n    vca.gain.value = gain\n\n    /* Connections */\n    vco.connect(vca)\n    vca.connect(destination)\n\n    vco.start(time)\n    if (duration > 0) vco.stop(time + duration)\n    return vco\n  }\n}\n\n/**\n * Given a note name, return the note midi number\n *\n * @name noteToMidi\n * @function\n * @param {String} noteName\n * @return {Integer} the note midi number or null if not a valid note name\n */\nSoundfont.noteToMidi = parser.midi\n\nmodule.exports = Soundfont\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}