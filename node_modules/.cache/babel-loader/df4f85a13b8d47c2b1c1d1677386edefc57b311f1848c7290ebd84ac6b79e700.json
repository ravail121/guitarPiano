{"ast":null,"code":"import { interceptConnections } from '../helpers/intercept-connections';\nexport const createNativeConstantSourceNodeFakerFactory = (addSilentConnection, createNativeAudioBufferSourceNode, createNativeGainNode, monitorConnections) => {\n  return (nativeContext, _ref) => {\n    let {\n      offset,\n      ...audioNodeOptions\n    } = _ref;\n    const audioBuffer = nativeContext.createBuffer(1, 2, 44100);\n    const audioBufferSourceNode = createNativeAudioBufferSourceNode(nativeContext, {\n      buffer: null,\n      channelCount: 2,\n      channelCountMode: 'max',\n      channelInterpretation: 'speakers',\n      loop: false,\n      loopEnd: 0,\n      loopStart: 0,\n      playbackRate: 1\n    });\n    const gainNode = createNativeGainNode(nativeContext, {\n      ...audioNodeOptions,\n      gain: offset\n    });\n    // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n    const channelData = audioBuffer.getChannelData(0);\n    // Bug #95: Safari does not play or loop one sample buffers.\n    channelData[0] = 1;\n    channelData[1] = 1;\n    audioBufferSourceNode.buffer = audioBuffer;\n    audioBufferSourceNode.loop = true;\n    const nativeConstantSourceNodeFaker = {\n      get bufferSize() {\n        return undefined;\n      },\n      get channelCount() {\n        return gainNode.channelCount;\n      },\n      set channelCount(value) {\n        gainNode.channelCount = value;\n      },\n      get channelCountMode() {\n        return gainNode.channelCountMode;\n      },\n      set channelCountMode(value) {\n        gainNode.channelCountMode = value;\n      },\n      get channelInterpretation() {\n        return gainNode.channelInterpretation;\n      },\n      set channelInterpretation(value) {\n        gainNode.channelInterpretation = value;\n      },\n      get context() {\n        return gainNode.context;\n      },\n      get inputs() {\n        return [];\n      },\n      get numberOfInputs() {\n        return audioBufferSourceNode.numberOfInputs;\n      },\n      get numberOfOutputs() {\n        return gainNode.numberOfOutputs;\n      },\n      get offset() {\n        return gainNode.gain;\n      },\n      get onended() {\n        return audioBufferSourceNode.onended;\n      },\n      set onended(value) {\n        audioBufferSourceNode.onended = value;\n      },\n      addEventListener() {\n        return audioBufferSourceNode.addEventListener(arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1], arguments.length <= 2 ? undefined : arguments[2]);\n      },\n      dispatchEvent() {\n        return audioBufferSourceNode.dispatchEvent(arguments.length <= 0 ? undefined : arguments[0]);\n      },\n      removeEventListener() {\n        return audioBufferSourceNode.removeEventListener(arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1], arguments.length <= 2 ? undefined : arguments[2]);\n      },\n      start() {\n        let when = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n        audioBufferSourceNode.start.call(audioBufferSourceNode, when);\n      },\n      stop() {\n        let when = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n        audioBufferSourceNode.stop.call(audioBufferSourceNode, when);\n      }\n    };\n    const whenConnected = () => audioBufferSourceNode.connect(gainNode);\n    const whenDisconnected = () => audioBufferSourceNode.disconnect(gainNode);\n    // Bug #175: Safari will not fire an ended event if the AudioBufferSourceNode is unconnected.\n    addSilentConnection(nativeContext, audioBufferSourceNode);\n    return monitorConnections(interceptConnections(nativeConstantSourceNodeFaker, gainNode), whenConnected, whenDisconnected);\n  };\n};","map":{"version":3,"mappings":"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","names":["interceptConnections","createNativeConstantSourceNodeFakerFactory","addSilentConnection","createNativeAudioBufferSourceNode","createNativeGainNode","monitorConnections","nativeContext","offset","audioNodeOptions","audioBuffer","createBuffer","audioBufferSourceNode","buffer","channelCount","channelCountMode","channelInterpretation","loop","loopEnd","loopStart","playbackRate","gainNode","gain","channelData","getChannelData","nativeConstantSourceNodeFaker","bufferSize","undefined","value","context","inputs","numberOfInputs","numberOfOutputs","onended","addEventListener","dispatchEvent","removeEventListener","start","when","call","stop","whenConnected","connect","whenDisconnected","disconnect"],"sources":["/Users/macbook/Desktop/Music/OwnGuitar/node_modules/standardized-audio-context/src/factories/native-constant-source-node-faker-factory.ts"],"sourcesContent":["import { interceptConnections } from '../helpers/intercept-connections';\nimport {\n    TNativeAudioBufferSourceNode,\n    TNativeAudioNode,\n    TNativeConstantSourceNode,\n    TNativeConstantSourceNodeFakerFactoryFactory\n} from '../types';\n\nexport const createNativeConstantSourceNodeFakerFactory: TNativeConstantSourceNodeFakerFactoryFactory = (\n    addSilentConnection,\n    createNativeAudioBufferSourceNode,\n    createNativeGainNode,\n    monitorConnections\n) => {\n    return (nativeContext, { offset, ...audioNodeOptions }) => {\n        const audioBuffer = nativeContext.createBuffer(1, 2, 44100);\n        const audioBufferSourceNode = createNativeAudioBufferSourceNode(nativeContext, {\n            buffer: null,\n            channelCount: 2,\n            channelCountMode: 'max',\n            channelInterpretation: 'speakers',\n            loop: false,\n            loopEnd: 0,\n            loopStart: 0,\n            playbackRate: 1\n        });\n        const gainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, gain: offset });\n\n        // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n        const channelData = audioBuffer.getChannelData(0);\n\n        // Bug #95: Safari does not play or loop one sample buffers.\n        channelData[0] = 1;\n        channelData[1] = 1;\n\n        audioBufferSourceNode.buffer = audioBuffer;\n        audioBufferSourceNode.loop = true;\n\n        const nativeConstantSourceNodeFaker = {\n            get bufferSize(): undefined {\n                return undefined;\n            },\n            get channelCount(): number {\n                return gainNode.channelCount;\n            },\n            set channelCount(value) {\n                gainNode.channelCount = value;\n            },\n            get channelCountMode(): TNativeConstantSourceNode['channelCountMode'] {\n                return gainNode.channelCountMode;\n            },\n            set channelCountMode(value) {\n                gainNode.channelCountMode = value;\n            },\n            get channelInterpretation(): TNativeConstantSourceNode['channelInterpretation'] {\n                return gainNode.channelInterpretation;\n            },\n            set channelInterpretation(value) {\n                gainNode.channelInterpretation = value;\n            },\n            get context(): TNativeConstantSourceNode['context'] {\n                return gainNode.context;\n            },\n            get inputs(): TNativeAudioNode[] {\n                return [];\n            },\n            get numberOfInputs(): number {\n                return audioBufferSourceNode.numberOfInputs;\n            },\n            get numberOfOutputs(): number {\n                return gainNode.numberOfOutputs;\n            },\n            get offset(): TNativeConstantSourceNode['offset'] {\n                return gainNode.gain;\n            },\n            get onended(): TNativeConstantSourceNode['onended'] {\n                return audioBufferSourceNode.onended;\n            },\n            set onended(value) {\n                audioBufferSourceNode.onended = <TNativeAudioBufferSourceNode['onended']>value;\n            },\n            addEventListener(...args: any[]): void {\n                return audioBufferSourceNode.addEventListener(args[0], args[1], args[2]);\n            },\n            dispatchEvent(...args: any[]): boolean {\n                return audioBufferSourceNode.dispatchEvent(args[0]);\n            },\n            removeEventListener(...args: any[]): void {\n                return audioBufferSourceNode.removeEventListener(args[0], args[1], args[2]);\n            },\n            start(when = 0): void {\n                audioBufferSourceNode.start.call(audioBufferSourceNode, when);\n            },\n            stop(when = 0): void {\n                audioBufferSourceNode.stop.call(audioBufferSourceNode, when);\n            }\n        };\n\n        const whenConnected = () => audioBufferSourceNode.connect(gainNode);\n        const whenDisconnected = () => audioBufferSourceNode.disconnect(gainNode);\n\n        // Bug #175: Safari will not fire an ended event if the AudioBufferSourceNode is unconnected.\n        addSilentConnection(nativeContext, audioBufferSourceNode);\n\n        return monitorConnections(interceptConnections(nativeConstantSourceNodeFaker, gainNode), whenConnected, whenDisconnected);\n    };\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}