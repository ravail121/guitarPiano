{"ast":null,"code":"import { assertRange } from \"./Debug\";\n/**\n * Assert that the number is in the given range.\n */\nexport function range(min) {\n  let max = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Infinity;\n  const valueMap = new WeakMap();\n  return function (target, propertyKey) {\n    Reflect.defineProperty(target, propertyKey, {\n      configurable: true,\n      enumerable: true,\n      get: function () {\n        return valueMap.get(this);\n      },\n      set: function (newValue) {\n        assertRange(newValue, min, max);\n        valueMap.set(this, newValue);\n      }\n    });\n  };\n}\n/**\n * Convert the time to seconds and assert that the time is in between the two\n * values when being set.\n */\nexport function timeRange(min) {\n  let max = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Infinity;\n  const valueMap = new WeakMap();\n  return function (target, propertyKey) {\n    Reflect.defineProperty(target, propertyKey, {\n      configurable: true,\n      enumerable: true,\n      get: function () {\n        return valueMap.get(this);\n      },\n      set: function (newValue) {\n        assertRange(this.toSeconds(newValue), min, max);\n        valueMap.set(this, newValue);\n      }\n    });\n  };\n}","map":{"version":3,"mappings":"AAAA,SAASA,WAAW,QAAQ,SAAS;AAGrC;;;AAGA,OAAM,SAAUC,KAAK,CAACC,GAAW,EAAgB;EAAA,IAAdC,GAAG,uEAAGC,QAAQ;EAChD,MAAMC,QAAQ,GAAyB,IAAIC,OAAO,EAAE;EACpD,OAAO,UAASC,MAAW,EAAEC,WAA4B;IACxDC,OAAO,CAACC,cAAc,CACrBH,MAAM,EACNC,WAAW,EACX;MACCG,YAAY,EAAE,IAAI;MAClBC,UAAU,EAAE,IAAI;MAChBC,GAAG,EAAE;QACJ,OAAOR,QAAQ,CAACQ,GAAG,CAAC,IAAI,CAAC;MAC1B,CAAC;MACDC,GAAG,EAAE,UAASC,QAAgB;QAC7Bf,WAAW,CAACe,QAAQ,EAAEb,GAAG,EAAEC,GAAG,CAAC;QAC/BE,QAAQ,CAACS,GAAG,CAAC,IAAI,EAAEC,QAAQ,CAAC;MAC7B;KACA,CACD;EACF,CAAC;AACF;AAEA;;;;AAIA,OAAM,SAAUC,SAAS,CAACd,GAAW,EAAgB;EAAA,IAAdC,GAAG,uEAAGC,QAAQ;EACpD,MAAMC,QAAQ,GAAuB,IAAIC,OAAO,EAAE;EAClD,OAAO,UAASC,MAAW,EAAEC,WAAmB;IAC/CC,OAAO,CAACC,cAAc,CACrBH,MAAM,EACNC,WAAW,EACX;MACCG,YAAY,EAAE,IAAI;MAClBC,UAAU,EAAE,IAAI;MAChBC,GAAG,EAAE;QACJ,OAAOR,QAAQ,CAACQ,GAAG,CAAC,IAAI,CAAC;MAC1B,CAAC;MACDC,GAAG,EAAE,UAASC,QAAc;QAC3Bf,WAAW,CAAC,IAAI,CAACiB,SAAS,CAACF,QAAQ,CAAC,EAAEb,GAAG,EAAEC,GAAG,CAAC;QAC/CE,QAAQ,CAACS,GAAG,CAAC,IAAI,EAAEC,QAAQ,CAAC;MAC7B;KACA,CACD;EACF,CAAC;AACF","names":["assertRange","range","min","max","Infinity","valueMap","WeakMap","target","propertyKey","Reflect","defineProperty","configurable","enumerable","get","set","newValue","timeRange","toSeconds"],"sources":["/Users/macbook/Desktop/Music/OwnGuitar/node_modules/tone/Tone/core/util/Decorator.ts"],"sourcesContent":["import { assertRange } from \"./Debug\";\nimport { Time } from \"../type/Units\";\n\n/**\n * Assert that the number is in the given range.\n */\nexport function range(min: number, max = Infinity) {\n\tconst valueMap: WeakMap<any, number> = new WeakMap();\n\treturn function(target: any, propertyKey: string | symbol) {\n\t\tReflect.defineProperty(\n\t\t\ttarget,\n\t\t\tpropertyKey,\n\t\t\t{\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tget: function() {\n\t\t\t\t\treturn valueMap.get(this);\n\t\t\t\t},\n\t\t\t\tset: function(newValue: number) {\n\t\t\t\t\tassertRange(newValue, min, max);\n\t\t\t\t\tvalueMap.set(this, newValue);\n\t\t\t\t}\n\t\t\t},\n\t\t);\n\t};\n}\n\n/**\n * Convert the time to seconds and assert that the time is in between the two\n * values when being set.\n */\nexport function timeRange(min: number, max = Infinity) {\n\tconst valueMap: WeakMap<any, Time> = new WeakMap();\n\treturn function(target: any, propertyKey: string) {\n\t\tReflect.defineProperty(\n\t\t\ttarget,\n\t\t\tpropertyKey,\n\t\t\t{\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tget: function() {\n\t\t\t\t\treturn valueMap.get(this);\n\t\t\t\t},\n\t\t\t\tset: function(newValue: Time) {\n\t\t\t\t\tassertRange(this.toSeconds(newValue), min, max);\n\t\t\t\t\tvalueMap.set(this, newValue);\n\t\t\t\t}\n\t\t\t},\n\t\t);\n\t};\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}