{"ast":null,"code":"import { Effect } from \"./Effect\";\nimport { MidSideSplit } from \"../component/channel/MidSideSplit\";\nimport { MidSideMerge } from \"../component/channel/MidSideMerge\";\n/**\n * Mid/Side processing separates the the 'mid' signal\n * (which comes out of both the left and the right channel)\n * and the 'side' (which only comes out of the the side channels)\n * and effects them separately before being recombined.\n * Applies a Mid/Side seperation and recombination.\n * Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).\n * This is a base-class for Mid/Side Effects.\n * @category Effect\n */\nexport class MidSideEffect extends Effect {\n  constructor(options) {\n    super(options);\n    this.name = \"MidSideEffect\";\n    this._midSideMerge = new MidSideMerge({\n      context: this.context\n    });\n    this._midSideSplit = new MidSideSplit({\n      context: this.context\n    });\n    this._midSend = this._midSideSplit.mid;\n    this._sideSend = this._midSideSplit.side;\n    this._midReturn = this._midSideMerge.mid;\n    this._sideReturn = this._midSideMerge.side;\n    // the connections\n    this.effectSend.connect(this._midSideSplit);\n    this._midSideMerge.connect(this.effectReturn);\n  }\n  /**\n   * Connect the mid chain of the effect\n   */\n  connectEffectMid() {\n    for (var _len = arguments.length, nodes = new Array(_len), _key = 0; _key < _len; _key++) {\n      nodes[_key] = arguments[_key];\n    }\n    this._midSend.chain(...nodes, this._midReturn);\n  }\n  /**\n   * Connect the side chain of the effect\n   */\n  connectEffectSide() {\n    for (var _len2 = arguments.length, nodes = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      nodes[_key2] = arguments[_key2];\n    }\n    this._sideSend.chain(...nodes, this._sideReturn);\n  }\n  dispose() {\n    super.dispose();\n    this._midSideSplit.dispose();\n    this._midSideMerge.dispose();\n    this._midSend.dispose();\n    this._sideSend.dispose();\n    this._midReturn.dispose();\n    this._sideReturn.dispose();\n    return this;\n  }\n}","map":{"version":3,"mappings":"AAAA,SAASA,MAAM,QAAuB,UAAU;AAChD,SAASC,YAAY,QAAQ,mCAAmC;AAChE,SAASC,YAAY,QAAQ,mCAAmC;AAKhE;;;;;;;;;;AAUA,OAAM,MAAgBC,aAAoD,SAAQH,MAAe;EAkChGI,YAAYC,OAA6B;IAExC,KAAK,CAACA,OAAO,CAAC;IAlCN,SAAI,GAAW,eAAe;IAoCtC,IAAI,CAACC,aAAa,GAAG,IAAIJ,YAAY,CAAC;MAAEK,OAAO,EAAE,IAAI,CAACA;IAAO,CAAE,CAAC;IAChE,IAAI,CAACC,aAAa,GAAG,IAAIP,YAAY,CAAC;MAAEM,OAAO,EAAE,IAAI,CAACA;IAAO,CAAE,CAAC;IAChE,IAAI,CAACE,QAAQ,GAAG,IAAI,CAACD,aAAa,CAACE,GAAG;IACtC,IAAI,CAACC,SAAS,GAAG,IAAI,CAACH,aAAa,CAACI,IAAI;IACxC,IAAI,CAACC,UAAU,GAAG,IAAI,CAACP,aAAa,CAACI,GAAG;IACxC,IAAI,CAACI,WAAW,GAAG,IAAI,CAACR,aAAa,CAACM,IAAI;IAE1C;IACA,IAAI,CAACG,UAAU,CAACC,OAAO,CAAC,IAAI,CAACR,aAAa,CAAC;IAC3C,IAAI,CAACF,aAAa,CAACU,OAAO,CAAC,IAAI,CAACC,YAAY,CAAC;EAC9C;EAEA;;;EAGUC,gBAAgB,GAAuB;IAAA,kCAAnBC,KAAmB;MAAnBA,KAAmB;IAAA;IAChD,IAAI,CAACV,QAAQ,CAACW,KAAK,CAAC,GAAGD,KAAK,EAAE,IAAI,CAACN,UAAU,CAAC;EAC/C;EAEA;;;EAGUQ,iBAAiB,GAAuB;IAAA,mCAAnBF,KAAmB;MAAnBA,KAAmB;IAAA;IACjD,IAAI,CAACR,SAAS,CAACS,KAAK,CAAC,GAAGD,KAAK,EAAE,IAAI,CAACL,WAAW,CAAC;EACjD;EAEAQ,OAAO;IACN,KAAK,CAACA,OAAO,EAAE;IACf,IAAI,CAACd,aAAa,CAACc,OAAO,EAAE;IAC5B,IAAI,CAAChB,aAAa,CAACgB,OAAO,EAAE;IAC5B,IAAI,CAACb,QAAQ,CAACa,OAAO,EAAE;IACvB,IAAI,CAACX,SAAS,CAACW,OAAO,EAAE;IACxB,IAAI,CAACT,UAAU,CAACS,OAAO,EAAE;IACzB,IAAI,CAACR,WAAW,CAACQ,OAAO,EAAE;IAC1B,OAAO,IAAI;EACZ","names":["Effect","MidSideSplit","MidSideMerge","MidSideEffect","constructor","options","_midSideMerge","context","_midSideSplit","_midSend","mid","_sideSend","side","_midReturn","_sideReturn","effectSend","connect","effectReturn","connectEffectMid","nodes","chain","connectEffectSide","dispose"],"sources":["/Users/macbook/Desktop/Music/OwnGuitar/node_modules/tone/Tone/effect/MidSideEffect.ts"],"sourcesContent":["import { Effect, EffectOptions } from \"./Effect\";\nimport { MidSideSplit } from \"../component/channel/MidSideSplit\";\nimport { MidSideMerge } from \"../component/channel/MidSideMerge\";\nimport { OutputNode, ToneAudioNode } from \"../core/context/ToneAudioNode\";\n\nexport type MidSideEffectOptions = EffectOptions;\n\n/**\n * Mid/Side processing separates the the 'mid' signal\n * (which comes out of both the left and the right channel)\n * and the 'side' (which only comes out of the the side channels)\n * and effects them separately before being recombined.\n * Applies a Mid/Side seperation and recombination.\n * Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).\n * This is a base-class for Mid/Side Effects.\n * @category Effect\n */\nexport abstract class MidSideEffect<Options extends MidSideEffectOptions> extends Effect<Options> {\n\n\treadonly name: string = \"MidSideEffect\";\n\n\t/**\n\t * The mid/side split\n\t */\n\tprivate _midSideSplit: MidSideSplit;\n\t\n\t/**\n\t * The mid/side merge\n\t */\n\tprivate _midSideMerge: MidSideMerge;\n\t\n\t/**\n\t * The mid send. Connect to mid processing\n\t */\n\tprotected _midSend: ToneAudioNode;\n\t\n\t/**\n\t * The side send. Connect to side processing\n\t */\n\tprotected _sideSend: ToneAudioNode;\n\t\n\t/**\n\t * The mid return connection\n\t */\n\tprotected _midReturn: ToneAudioNode;\n\t\n\t/**\n\t * The side return connection\n\t */\n\tprotected _sideReturn: ToneAudioNode;\n\n\tconstructor(options: MidSideEffectOptions) {\n\n\t\tsuper(options);\n\n\t\tthis._midSideMerge = new MidSideMerge({ context: this.context });\n\t\tthis._midSideSplit = new MidSideSplit({ context: this.context });\n\t\tthis._midSend = this._midSideSplit.mid;\n\t\tthis._sideSend = this._midSideSplit.side;\n\t\tthis._midReturn = this._midSideMerge.mid;\n\t\tthis._sideReturn = this._midSideMerge.side;\n\n\t\t// the connections\n\t\tthis.effectSend.connect(this._midSideSplit);\n\t\tthis._midSideMerge.connect(this.effectReturn);\n\t}\n\n\t/**\n\t * Connect the mid chain of the effect\n\t */\n\tprotected connectEffectMid(...nodes: OutputNode[]): void{\n\t\tthis._midSend.chain(...nodes, this._midReturn);\n\t}\n\t\n\t/**\n\t * Connect the side chain of the effect\n\t */\n\tprotected connectEffectSide(...nodes: OutputNode[]): void{\n\t\tthis._sideSend.chain(...nodes, this._sideReturn);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._midSideSplit.dispose();\n\t\tthis._midSideMerge.dispose();\n\t\tthis._midSend.dispose();\n\t\tthis._sideSend.dispose();\n\t\tthis._midReturn.dispose();\n\t\tthis._sideReturn.dispose();\n\t\treturn this;\n\t}\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}