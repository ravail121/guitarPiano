{"ast":null,"code":"import { Volume } from \"../../component/channel/Volume\";\nimport { ToneAudioBuffers } from \"../../core/context/ToneAudioBuffers\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { assert } from \"../../core/util/Debug\";\nimport { noOp, readOnly } from \"../../core/util/Interface\";\nimport { Source } from \"../Source\";\nimport { Player } from \"./Player\";\n/**\n * Players combines multiple [[Player]] objects.\n * @category Source\n */\nexport class Players extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(Players.getDefaults(), arguments, [\"urls\", \"onload\"], \"urls\"));\n    this.name = \"Players\";\n    /**\n     * Players has no input.\n     */\n    this.input = undefined;\n    /**\n     * The container of all of the players\n     */\n    this._players = new Map();\n    const options = optionsFromArguments(Players.getDefaults(), arguments, [\"urls\", \"onload\"], \"urls\");\n    /**\n     * The output volume node\n     */\n    this._volume = this.output = new Volume({\n      context: this.context,\n      volume: options.volume\n    });\n    this.volume = this._volume.volume;\n    readOnly(this, \"volume\");\n    this._buffers = new ToneAudioBuffers({\n      urls: options.urls,\n      onload: options.onload,\n      baseUrl: options.baseUrl,\n      onerror: options.onerror\n    });\n    // mute initially\n    this.mute = options.mute;\n    this._fadeIn = options.fadeIn;\n    this._fadeOut = options.fadeOut;\n  }\n  static getDefaults() {\n    return Object.assign(Source.getDefaults(), {\n      baseUrl: \"\",\n      fadeIn: 0,\n      fadeOut: 0,\n      mute: false,\n      onload: noOp,\n      onerror: noOp,\n      urls: {},\n      volume: 0\n    });\n  }\n  /**\n   * Mute the output.\n   */\n  get mute() {\n    return this._volume.mute;\n  }\n  set mute(mute) {\n    this._volume.mute = mute;\n  }\n  /**\n   * The fadeIn time of the envelope applied to the source.\n   */\n  get fadeIn() {\n    return this._fadeIn;\n  }\n  set fadeIn(fadeIn) {\n    this._fadeIn = fadeIn;\n    this._players.forEach(player => {\n      player.fadeIn = fadeIn;\n    });\n  }\n  /**\n   * The fadeOut time of the each of the sources.\n   */\n  get fadeOut() {\n    return this._fadeOut;\n  }\n  set fadeOut(fadeOut) {\n    this._fadeOut = fadeOut;\n    this._players.forEach(player => {\n      player.fadeOut = fadeOut;\n    });\n  }\n  /**\n   * The state of the players object. Returns \"started\" if any of the players are playing.\n   */\n  get state() {\n    const playing = Array.from(this._players).some(_ref => {\n      let [_, player] = _ref;\n      return player.state === \"started\";\n    });\n    return playing ? \"started\" : \"stopped\";\n  }\n  /**\n   * True if the buffers object has a buffer by that name.\n   * @param name  The key or index of the buffer.\n   */\n  has(name) {\n    return this._buffers.has(name);\n  }\n  /**\n   * Get a player by name.\n   * @param  name  The players name as defined in the constructor object or `add` method.\n   */\n  player(name) {\n    assert(this.has(name), `No Player with the name ${name} exists on this object`);\n    if (!this._players.has(name)) {\n      const player = new Player({\n        context: this.context,\n        fadeIn: this._fadeIn,\n        fadeOut: this._fadeOut,\n        url: this._buffers.get(name)\n      }).connect(this.output);\n      this._players.set(name, player);\n    }\n    return this._players.get(name);\n  }\n  /**\n   * If all the buffers are loaded or not\n   */\n  get loaded() {\n    return this._buffers.loaded;\n  }\n  /**\n   * Add a player by name and url to the Players\n   * @param  name A unique name to give the player\n   * @param  url  Either the url of the bufer or a buffer which will be added with the given name.\n   * @param callback  The callback to invoke when the url is loaded.\n   */\n  add(name, url, callback) {\n    assert(!this._buffers.has(name), \"A buffer with that name already exists on this object\");\n    this._buffers.add(name, url, callback);\n    return this;\n  }\n  /**\n   * Stop all of the players at the given time\n   * @param time The time to stop all of the players.\n   */\n  stopAll(time) {\n    this._players.forEach(player => player.stop(time));\n    return this;\n  }\n  dispose() {\n    super.dispose();\n    this._volume.dispose();\n    this.volume.dispose();\n    this._players.forEach(player => player.dispose());\n    this._buffers.dispose();\n    return this;\n  }\n}","map":{"version":3,"mappings":"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","names":["Volume","ToneAudioBuffers","ToneAudioNode","optionsFromArguments","assert","noOp","readOnly","Source","Player","Players","constructor","getDefaults","arguments","undefined","Map","options","_volume","output","context","volume","_buffers","urls","onload","baseUrl","onerror","mute","_fadeIn","fadeIn","_fadeOut","fadeOut","Object","assign","_players","forEach","player","state","playing","Array","from","some","_","has","name","url","get","connect","set","loaded","add","callback","stopAll","time","stop","dispose"],"sources":["/Users/macbook/Desktop/Music/OwnGuitar/node_modules/tone/Tone/source/buffer/Players.ts"],"sourcesContent":["import { Volume } from \"../../component/channel/Volume\";\nimport { Param } from \"../../core/context/Param\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { ToneAudioBuffers, ToneAudioBuffersUrlMap } from \"../../core/context/ToneAudioBuffers\";\nimport { OutputNode, ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { Decibels, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { assert } from \"../../core/util/Debug\";\nimport { noOp, readOnly } from \"../../core/util/Interface\";\nimport { BasicPlaybackState } from \"../../core/util/StateTimeline\";\nimport { Source, SourceOptions } from \"../Source\";\nimport { Player } from \"./Player\";\n\nexport interface PlayersOptions extends SourceOptions {\n\turls: ToneAudioBuffersUrlMap;\n\tvolume: Decibels;\n\tmute: boolean;\n\tonload: () => void;\n\tonerror: (error: Error) => void;\n\tbaseUrl: string;\n\tfadeIn: Time;\n\tfadeOut: Time;\n}\n\n/**\n * Players combines multiple [[Player]] objects.\n * @category Source\n */\nexport class Players extends ToneAudioNode<PlayersOptions> {\n\n\treadonly name: string = \"Players\";\n\n\t/**\n\t * The output volume node\n\t */\n\tprivate _volume: Volume;\n\n\t/**\n\t * The volume of the output in decibels.\n\t */\n\treadonly volume: Param<\"decibels\">;\n\n\t/**\n\t * The combined output of all of the players\n\t */\n\treadonly output: OutputNode;\n\n\t/**\n\t * Players has no input.\n\t */\n\treadonly input = undefined;\n\n\t/**\n\t * The container of all of the players\n\t */\n\tprivate _players: Map<string, Player> = new Map();\n\n\t/**\n\t * The container of all the buffers\n\t */\n\tprivate _buffers: ToneAudioBuffers;\n\n\t/**\n\t * private holder of the fadeIn time\n\t */\n\tprivate _fadeIn: Time;\n\n\t/**\n\t * private holder of the fadeOut time\n\t */\n\tprivate _fadeOut: Time;\n\n\t/**\n\t * @param urls An object mapping a name to a url.\n\t * @param onload The function to invoke when all buffers are loaded.\n\t */\n\tconstructor(urls?: ToneAudioBuffersUrlMap, onload?: () => void);\n\t/**\n\t * @param urls An object mapping a name to a url.\n\t * @param options The remaining options associated with the players\n\t */\n\tconstructor(urls?: ToneAudioBuffersUrlMap, options?: Partial<Omit<PlayersOptions, \"urls\">>);\n\tconstructor(options?: Partial<PlayersOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Players.getDefaults(), arguments, [\"urls\", \"onload\"], \"urls\"));\n\t\tconst options = optionsFromArguments(Players.getDefaults(), arguments, [\"urls\", \"onload\"], \"urls\");\n\n\t\t/**\n\t\t * The output volume node\n\t\t */\n\t\tthis._volume = this.output = new Volume({\n\t\t\tcontext: this.context,\n\t\t\tvolume: options.volume,\n\t\t});\n\n\t\tthis.volume = this._volume.volume;\n\t\treadOnly(this, \"volume\");\n\t\tthis._buffers = new ToneAudioBuffers({\n\t\t\turls: options.urls, \n\t\t\tonload: options.onload, \n\t\t\tbaseUrl: options.baseUrl,\n\t\t\tonerror: options.onerror\n\t\t});\n\t\t// mute initially\n\t\tthis.mute = options.mute;\n\t\tthis._fadeIn = options.fadeIn;\n\t\tthis._fadeOut = options.fadeOut;\n\t}\n\n\tstatic getDefaults(): PlayersOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tbaseUrl: \"\",\n\t\t\tfadeIn: 0,\n\t\t\tfadeOut: 0,\n\t\t\tmute: false,\n\t\t\tonload: noOp,\n\t\t\tonerror: noOp,\n\t\t\turls: {},\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Mute the output.\n\t */\n\tget mute(): boolean {\n\t\treturn this._volume.mute;\n\t}\n\tset mute(mute) {\n\t\tthis._volume.mute = mute;\n\t}\n\n\t/**\n\t * The fadeIn time of the envelope applied to the source.\n\t */\n\tget fadeIn(): Time {\n\t\treturn this._fadeIn;\n\t}\n\tset fadeIn(fadeIn) {\n\t\tthis._fadeIn = fadeIn;\n\t\tthis._players.forEach(player => {\n\t\t\tplayer.fadeIn = fadeIn;\n\t\t});\n\t}\n\n\t/**\n\t * The fadeOut time of the each of the sources.\n\t */\n\tget fadeOut(): Time {\n\t\treturn this._fadeOut;\n\t}\n\tset fadeOut(fadeOut) {\n\t\tthis._fadeOut = fadeOut;\n\t\tthis._players.forEach(player => {\n\t\t\tplayer.fadeOut = fadeOut;\n\t\t});\n\t}\n\n\t/**\n\t * The state of the players object. Returns \"started\" if any of the players are playing.\n\t */\n\tget state(): BasicPlaybackState {\n\t\tconst playing = Array.from(this._players).some(([_, player]) => player.state === \"started\");\n\t\treturn playing ? \"started\" : \"stopped\";\n\t}\n\n\t/**\n\t * True if the buffers object has a buffer by that name.\n\t * @param name  The key or index of the buffer.\n\t */\n\thas(name: string): boolean {\n\t\treturn this._buffers.has(name);\n\t}\n\n\t/**\n\t * Get a player by name.\n\t * @param  name  The players name as defined in the constructor object or `add` method.\n\t */\n\tplayer(name: string): Player {\n\t\tassert(this.has(name), `No Player with the name ${name} exists on this object`);\n\t\tif (!this._players.has(name)) {\n\t\t\tconst player = new Player({\n\t\t\t\tcontext: this.context,\n\t\t\t\tfadeIn: this._fadeIn,\n\t\t\t\tfadeOut: this._fadeOut,\n\t\t\t\turl: this._buffers.get(name),\n\t\t\t}).connect(this.output);\n\t\t\tthis._players.set(name, player);\n\t\t}\n\t\treturn this._players.get(name) as Player;\n\t}\n\n\t/**\n\t * If all the buffers are loaded or not\n\t */\n\tget loaded(): boolean {\n\t\treturn this._buffers.loaded;\n\t}\n\n\t/**\n\t * Add a player by name and url to the Players\n\t * @param  name A unique name to give the player\n\t * @param  url  Either the url of the bufer or a buffer which will be added with the given name.\n\t * @param callback  The callback to invoke when the url is loaded.\n\t */\n\tadd(name: string, url: string | ToneAudioBuffer | AudioBuffer, callback?: () => void): this {\n\t\tassert(!this._buffers.has(name), \"A buffer with that name already exists on this object\");\n\t\tthis._buffers.add(name, url, callback);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop all of the players at the given time\n\t * @param time The time to stop all of the players.\n\t */\n\tstopAll(time?: Time): this {\n\t\tthis._players.forEach(player => player.stop(time));\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._volume.dispose();\n\t\tthis.volume.dispose();\n\t\tthis._players.forEach(player => player.dispose());\n\t\tthis._buffers.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}