{"ast":null,"code":"import { AmplitudeEnvelope } from \"../component/envelope/AmplitudeEnvelope\";\nimport { Envelope } from \"../component/envelope/Envelope\";\nimport { Filter } from \"../component/filter/Filter\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Monophonic } from \"../instrument/Monophonic\";\nimport { OmniOscillator } from \"../source/oscillator/OmniOscillator\";\nimport { Source } from \"../source/Source\";\nimport { FrequencyEnvelope } from \"../component/envelope/FrequencyEnvelope\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\n/**\n * MonoSynth is composed of one `oscillator`, one `filter`, and two `envelopes`.\n * The amplitude of the Oscillator and the cutoff frequency of the\n * Filter are controlled by Envelopes.\n * <img src=\"https://docs.google.com/drawings/d/1gaY1DF9_Hzkodqf8JI1Cg2VZfwSElpFQfI94IQwad38/pub?w=924&h=240\">\n * @example\n * const synth = new Tone.MonoSynth({\n * \toscillator: {\n * \t\ttype: \"square\"\n * \t},\n * \tenvelope: {\n * \t\tattack: 0.1\n * \t}\n * }).toDestination();\n * synth.triggerAttackRelease(\"C4\", \"8n\");\n * @category Instrument\n */\nexport class MonoSynth extends Monophonic {\n  constructor() {\n    super(optionsFromArguments(MonoSynth.getDefaults(), arguments));\n    this.name = \"MonoSynth\";\n    const options = optionsFromArguments(MonoSynth.getDefaults(), arguments);\n    this.oscillator = new OmniOscillator(Object.assign(options.oscillator, {\n      context: this.context,\n      detune: options.detune,\n      onstop: () => this.onsilence(this)\n    }));\n    this.frequency = this.oscillator.frequency;\n    this.detune = this.oscillator.detune;\n    this.filter = new Filter(Object.assign(options.filter, {\n      context: this.context\n    }));\n    this.filterEnvelope = new FrequencyEnvelope(Object.assign(options.filterEnvelope, {\n      context: this.context\n    }));\n    this.envelope = new AmplitudeEnvelope(Object.assign(options.envelope, {\n      context: this.context\n    }));\n    // connect the oscillators to the output\n    this.oscillator.chain(this.filter, this.envelope, this.output);\n    // connect the filter envelope\n    this.filterEnvelope.connect(this.filter.frequency);\n    readOnly(this, [\"oscillator\", \"frequency\", \"detune\", \"filter\", \"filterEnvelope\", \"envelope\"]);\n  }\n  static getDefaults() {\n    return Object.assign(Monophonic.getDefaults(), {\n      envelope: Object.assign(omitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())), {\n        attack: 0.005,\n        decay: 0.1,\n        release: 1,\n        sustain: 0.9\n      }),\n      filter: Object.assign(omitFromObject(Filter.getDefaults(), Object.keys(ToneAudioNode.getDefaults())), {\n        Q: 1,\n        rolloff: -12,\n        type: \"lowpass\"\n      }),\n      filterEnvelope: Object.assign(omitFromObject(FrequencyEnvelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())), {\n        attack: 0.6,\n        baseFrequency: 200,\n        decay: 0.2,\n        exponent: 2,\n        octaves: 3,\n        release: 2,\n        sustain: 0.5\n      }),\n      oscillator: Object.assign(omitFromObject(OmniOscillator.getDefaults(), Object.keys(Source.getDefaults())), {\n        type: \"sawtooth\"\n      })\n    });\n  }\n  /**\n   * start the attack portion of the envelope\n   * @param time the time the attack should start\n   * @param velocity the velocity of the note (0-1)\n   */\n  _triggerEnvelopeAttack(time) {\n    let velocity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    this.envelope.triggerAttack(time, velocity);\n    this.filterEnvelope.triggerAttack(time);\n    this.oscillator.start(time);\n    if (this.envelope.sustain === 0) {\n      const computedAttack = this.toSeconds(this.envelope.attack);\n      const computedDecay = this.toSeconds(this.envelope.decay);\n      this.oscillator.stop(time + computedAttack + computedDecay);\n    }\n  }\n  /**\n   * start the release portion of the envelope\n   * @param time the time the release should start\n   */\n  _triggerEnvelopeRelease(time) {\n    this.envelope.triggerRelease(time);\n    this.filterEnvelope.triggerRelease(time);\n    this.oscillator.stop(time + this.toSeconds(this.envelope.release));\n  }\n  getLevelAtTime(time) {\n    time = this.toSeconds(time);\n    return this.envelope.getValueAtTime(time);\n  }\n  dispose() {\n    super.dispose();\n    this.oscillator.dispose();\n    this.envelope.dispose();\n    this.filterEnvelope.dispose();\n    this.filter.dispose();\n    return this;\n  }\n}","map":{"version":3,"mappings":"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","names":["AmplitudeEnvelope","Envelope","Filter","omitFromObject","optionsFromArguments","readOnly","Monophonic","OmniOscillator","Source","FrequencyEnvelope","ToneAudioNode","MonoSynth","constructor","getDefaults","arguments","options","oscillator","Object","assign","context","detune","onstop","onsilence","frequency","filter","filterEnvelope","envelope","chain","output","connect","keys","attack","decay","release","sustain","Q","rolloff","type","baseFrequency","exponent","octaves","_triggerEnvelopeAttack","time","velocity","triggerAttack","start","computedAttack","toSeconds","computedDecay","stop","_triggerEnvelopeRelease","triggerRelease","getLevelAtTime","getValueAtTime","dispose"],"sources":["/Users/macbook/Desktop/Music/OwnGuitar/node_modules/tone/Tone/instrument/MonoSynth.ts"],"sourcesContent":["import { AmplitudeEnvelope } from \"../component/envelope/AmplitudeEnvelope\";\nimport { Envelope, EnvelopeOptions } from \"../component/envelope/Envelope\";\nimport { Filter, FilterOptions } from \"../component/filter/Filter\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly, RecursivePartial } from \"../core/util/Interface\";\nimport { Monophonic, MonophonicOptions } from \"../instrument/Monophonic\";\nimport { OmniOscillator } from \"../source/oscillator/OmniOscillator\";\nimport { Source } from \"../source/Source\";\nimport { FrequencyEnvelope, FrequencyEnvelopeOptions } from \"../component/envelope/FrequencyEnvelope\";\nimport { NormalRange, Seconds, Time } from \"../core/type/Units\";\nimport { Signal } from \"../signal/Signal\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { OmniOscillatorSynthOptions } from \"../source/oscillator/OscillatorInterface\";\n\nexport interface MonoSynthOptions extends MonophonicOptions {\n\toscillator: OmniOscillatorSynthOptions;\n\tenvelope: Omit<EnvelopeOptions, keyof ToneAudioNodeOptions>;\n\tfilterEnvelope: Omit<FrequencyEnvelopeOptions, keyof ToneAudioNodeOptions>;\n\tfilter: Omit<FilterOptions, keyof ToneAudioNodeOptions>;\n}\n\n/**\n * MonoSynth is composed of one `oscillator`, one `filter`, and two `envelopes`.\n * The amplitude of the Oscillator and the cutoff frequency of the\n * Filter are controlled by Envelopes.\n * <img src=\"https://docs.google.com/drawings/d/1gaY1DF9_Hzkodqf8JI1Cg2VZfwSElpFQfI94IQwad38/pub?w=924&h=240\">\n * @example\n * const synth = new Tone.MonoSynth({\n * \toscillator: {\n * \t\ttype: \"square\"\n * \t},\n * \tenvelope: {\n * \t\tattack: 0.1\n * \t}\n * }).toDestination();\n * synth.triggerAttackRelease(\"C4\", \"8n\");\n * @category Instrument\n */\nexport class MonoSynth extends Monophonic<MonoSynthOptions> {\n\n\treadonly name = \"MonoSynth\";\n\n\t/**\n\t * The oscillator.\n\t */\n\treadonly oscillator: OmniOscillator<any>;\n\n\t/**\n\t * The frequency control.\n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\n\t/**\n\t * The detune control.\n\t */\n\treadonly detune: Signal<\"cents\">;\n\n\t/**\n\t * The filter.\n\t */\n\treadonly filter: Filter;\n\n\t/**\n\t * The filter envelope.\n\t */\n\treadonly filterEnvelope: FrequencyEnvelope;\n\n\t/**\n\t * The amplitude envelope.\n\t */\n\treadonly envelope: AmplitudeEnvelope;\n\n\tconstructor(options?: RecursivePartial<MonoSynthOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(MonoSynth.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(MonoSynth.getDefaults(), arguments);\n\n\t\tthis.oscillator = new OmniOscillator(Object.assign(options.oscillator, {\n\t\t\tcontext: this.context,\n\t\t\tdetune: options.detune,\n\t\t\tonstop: () => this.onsilence(this),\n\t\t}));\n\t\tthis.frequency = this.oscillator.frequency;\n\t\tthis.detune = this.oscillator.detune;\n\t\tthis.filter = new Filter(Object.assign(options.filter, { context: this.context }));\n\t\tthis.filterEnvelope = new FrequencyEnvelope(Object.assign(options.filterEnvelope, { context: this.context }));\n\t\tthis.envelope = new AmplitudeEnvelope(Object.assign(options.envelope, { context: this.context }));\n\n\t\t// connect the oscillators to the output\n\t\tthis.oscillator.chain(this.filter, this.envelope, this.output);\n\n\t\t// connect the filter envelope\n\t\tthis.filterEnvelope.connect(this.filter.frequency);\n\n\t\treadOnly(this, [\"oscillator\", \"frequency\", \"detune\", \"filter\", \"filterEnvelope\", \"envelope\"]);\n\t}\n\n\tstatic getDefaults(): MonoSynthOptions {\n\t\treturn Object.assign(Monophonic.getDefaults(), {\n\t\t\tenvelope: Object.assign(\n\t\t\t\tomitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())),\n\t\t\t\t{\n\t\t\t\t\tattack: 0.005,\n\t\t\t\t\tdecay: 0.1,\n\t\t\t\t\trelease: 1,\n\t\t\t\t\tsustain: 0.9,\n\t\t\t\t},\n\t\t\t),\n\t\t\tfilter: Object.assign(\n\t\t\t\tomitFromObject(Filter.getDefaults(), Object.keys(ToneAudioNode.getDefaults())),\n\t\t\t\t{\n\t\t\t\t\tQ: 1,\n\t\t\t\t\trolloff: -12,\n\t\t\t\t\ttype: \"lowpass\",\n\t\t\t\t},\n\t\t\t),\n\t\t\tfilterEnvelope: Object.assign(\n\t\t\t\tomitFromObject(FrequencyEnvelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())),\n\t\t\t\t{\n\t\t\t\t\tattack: 0.6,\n\t\t\t\t\tbaseFrequency: 200,\n\t\t\t\t\tdecay: 0.2,\n\t\t\t\t\texponent: 2,\n\t\t\t\t\toctaves: 3,\n\t\t\t\t\trelease: 2,\n\t\t\t\t\tsustain: 0.5,\n\t\t\t\t}\n\t\t\t),\n\t\t\toscillator: Object.assign(\n\t\t\t\tomitFromObject(OmniOscillator.getDefaults(), Object.keys(Source.getDefaults())),\n\t\t\t\t{\n\t\t\t\t\ttype: \"sawtooth\",\n\t\t\t\t},\n\t\t\t) as OmniOscillatorSynthOptions,\n\t\t});\n\t}\n\n\t/**\n\t * start the attack portion of the envelope\n\t * @param time the time the attack should start\n\t * @param velocity the velocity of the note (0-1)\n\t */\n\tprotected _triggerEnvelopeAttack(time: Seconds, velocity = 1): void {\n\t\tthis.envelope.triggerAttack(time, velocity);\n\t\tthis.filterEnvelope.triggerAttack(time);\n\t\tthis.oscillator.start(time);\n\t\tif (this.envelope.sustain === 0) {\n\t\t\tconst computedAttack = this.toSeconds(this.envelope.attack);\n\t\t\tconst computedDecay = this.toSeconds(this.envelope.decay);\n\t\t\tthis.oscillator.stop(time + computedAttack + computedDecay);\n\t\t}\n\t}\n\n\t/**\n\t * start the release portion of the envelope\n\t * @param time the time the release should start\n\t */\n\tprotected _triggerEnvelopeRelease(time: Seconds): void {\n\t\tthis.envelope.triggerRelease(time);\n\t\tthis.filterEnvelope.triggerRelease(time);\n\t\tthis.oscillator.stop(time + this.toSeconds(this.envelope.release));\n\t}\n\n\tgetLevelAtTime(time: Time): NormalRange {\n\t\ttime = this.toSeconds(time);\n\t\treturn this.envelope.getValueAtTime(time);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.oscillator.dispose();\n\t\tthis.envelope.dispose();\n\t\tthis.filterEnvelope.dispose();\n\t\tthis.filter.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}