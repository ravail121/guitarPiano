{"ast":null,"code":"import range from 'just-range';\nconst SORTED_PITCHES = ['C', 'Db', 'D', 'Eb', 'E', 'F', 'Gb', 'G', 'Ab', 'A', 'Bb', 'B'];\nconst ACCIDENTAL_PITCHES = ['Db', 'Eb', 'Gb', 'Ab', 'Bb'];\nconst PITCH_INDEXES = {\n  C: 0,\n  'C#': 1,\n  Db: 1,\n  D: 2,\n  'D#': 3,\n  Eb: 3,\n  E: 4,\n  F: 5,\n  'F#': 6,\n  Gb: 6,\n  G: 7,\n  'G#': 8,\n  Ab: 8,\n  A: 9,\n  'A#': 10,\n  Bb: 10,\n  B: 11\n};\nconst MIDI_NUMBER_C0 = 12;\nconst MIN_MIDI_NUMBER = MIDI_NUMBER_C0;\nconst MAX_MIDI_NUMBER = 127;\nconst NOTE_REGEX = /([a-g])([#b]?)(\\d+)/;\nconst NOTES_IN_OCTAVE = 12;\n\n// Converts string notes in scientific pitch notation to a MIDI number, or null.\n//\n// Example: \"c#0\" => 13, \"eb5\" => 75, \"abc\" => null\n//\n// References:\n// - http://www.flutopedia.com/octave_notation.htm\n// - https://github.com/danigb/tonal/blob/master/packages/note/index.js\nfunction fromNote(note) {\n  if (!note) {\n    throw Error('Invalid note argument');\n  }\n  const match = NOTE_REGEX.exec(note.toLowerCase());\n  if (!match) {\n    throw Error('Invalid note argument');\n  }\n  const [, letter, accidental, octave] = match;\n  const pitchName = `${letter.toUpperCase()}${accidental}`;\n  const pitchIndex = PITCH_INDEXES[pitchName];\n  if (pitchIndex == null) {\n    throw Error('Invalid note argument');\n  }\n  return MIDI_NUMBER_C0 + pitchIndex + NOTES_IN_OCTAVE * parseInt(octave, 10);\n}\nfunction noteNameFromMidi(midiNumber, displayType) {\n  if (!midiNumber) {\n    throw Error(\"Invalid MIDI note argument\");\n  }\n  console.log(displayType);\n  let inFirstOctave = midiNumber % 12;\n  let found = Object.keys(PITCH_INDEXES).filter(key => PITCH_INDEXES[key] === inFirstOctave);\n  if (found.length > 1) {\n    return found[displayType];\n  }\n  return found[0];\n}\n\n//\n// Build cache for getAttributes\n//\nfunction buildMidiNumberAttributes(midiNumber) {\n  const pitchIndex = (midiNumber - MIDI_NUMBER_C0) % NOTES_IN_OCTAVE;\n  const octave = Math.floor((midiNumber - MIDI_NUMBER_C0) / NOTES_IN_OCTAVE);\n  const pitchName = SORTED_PITCHES[pitchIndex];\n  return {\n    note: `${pitchName}${octave}`,\n    pitchName,\n    octave,\n    midiNumber,\n    isAccidental: ACCIDENTAL_PITCHES.includes(pitchName)\n  };\n}\nfunction buildMidiNumberAttributesCache() {\n  return range(MIN_MIDI_NUMBER, MAX_MIDI_NUMBER + 1).reduce((cache, midiNumber) => {\n    cache[midiNumber] = buildMidiNumberAttributes(midiNumber);\n    return cache;\n  }, {});\n}\nconst midiNumberAttributesCache = buildMidiNumberAttributesCache();\n\n// Returns an object containing various attributes for a given MIDI number.\n// Throws error for invalid midiNumbers.\nfunction getAttributes(midiNumber) {\n  const attrs = midiNumberAttributesCache[midiNumber];\n  if (!attrs) {\n    throw Error('Invalid MIDI number');\n  }\n  return attrs;\n}\n\n// Returns all MIDI numbers corresponding to natural notes, e.g. C and not C# or Bb.\nconst NATURAL_MIDI_NUMBERS = range(MIN_MIDI_NUMBER, MAX_MIDI_NUMBER + 1).filter(_c = midiNumber => !getAttributes(midiNumber).isAccidental);\n_c2 = NATURAL_MIDI_NUMBERS;\nexport default {\n  fromNote,\n  noteNameFromMidi,\n  getAttributes,\n  MIN_MIDI_NUMBER,\n  MAX_MIDI_NUMBER,\n  NATURAL_MIDI_NUMBERS\n};\nvar _c, _c2;\n$RefreshReg$(_c, \"NATURAL_MIDI_NUMBERS$range(MIN_MIDI_NUMBER, MAX_MIDI_NUMBER + 1).filter\");\n$RefreshReg$(_c2, \"NATURAL_MIDI_NUMBERS\");","map":{"version":3,"names":["range","SORTED_PITCHES","ACCIDENTAL_PITCHES","PITCH_INDEXES","C","Db","D","Eb","E","F","Gb","G","Ab","A","Bb","B","MIDI_NUMBER_C0","MIN_MIDI_NUMBER","MAX_MIDI_NUMBER","NOTE_REGEX","NOTES_IN_OCTAVE","fromNote","note","Error","match","exec","toLowerCase","letter","accidental","octave","pitchName","toUpperCase","pitchIndex","parseInt","noteNameFromMidi","midiNumber","displayType","console","log","inFirstOctave","found","Object","keys","filter","key","length","buildMidiNumberAttributes","Math","floor","isAccidental","includes","buildMidiNumberAttributesCache","reduce","cache","midiNumberAttributesCache","getAttributes","attrs","NATURAL_MIDI_NUMBERS"],"sources":["/Users/macbook/Desktop/Music/OwnGuitar/src/react-piano-master/src/MidiNumbers.js"],"sourcesContent":["import range from 'just-range';\n\nconst SORTED_PITCHES = ['C', 'Db', 'D', 'Eb', 'E', 'F', 'Gb', 'G', 'Ab', 'A', 'Bb', 'B'];\nconst ACCIDENTAL_PITCHES = ['Db', 'Eb', 'Gb', 'Ab', 'Bb'];\nconst PITCH_INDEXES = {\n  C: 0,\n  'C#': 1,\n  Db: 1,\n  D: 2,\n  'D#': 3,\n  Eb: 3,\n  E: 4,\n  F: 5,\n  'F#': 6,\n  Gb: 6,\n  G: 7,\n  'G#': 8,\n  Ab: 8,\n  A: 9,\n  'A#': 10,\n  Bb: 10,\n  B: 11,\n};\nconst MIDI_NUMBER_C0 = 12;\nconst MIN_MIDI_NUMBER = MIDI_NUMBER_C0;\nconst MAX_MIDI_NUMBER = 127;\nconst NOTE_REGEX = /([a-g])([#b]?)(\\d+)/;\nconst NOTES_IN_OCTAVE = 12;\n\n// Converts string notes in scientific pitch notation to a MIDI number, or null.\n//\n// Example: \"c#0\" => 13, \"eb5\" => 75, \"abc\" => null\n//\n// References:\n// - http://www.flutopedia.com/octave_notation.htm\n// - https://github.com/danigb/tonal/blob/master/packages/note/index.js\nfunction fromNote(note) {\n  if (!note) {\n    throw Error('Invalid note argument');\n  }\n  const match = NOTE_REGEX.exec(note.toLowerCase());\n  if (!match) {\n    throw Error('Invalid note argument');\n  }\n  const [, letter, accidental, octave] = match;\n  const pitchName = `${letter.toUpperCase()}${accidental}`;\n  const pitchIndex = PITCH_INDEXES[pitchName];\n  if (pitchIndex == null) {\n    throw Error('Invalid note argument');\n  }\n  return MIDI_NUMBER_C0 + pitchIndex + NOTES_IN_OCTAVE * parseInt(octave, 10);\n}\n\nfunction noteNameFromMidi(midiNumber, displayType) {\n  if (!midiNumber) {\n    throw Error(\"Invalid MIDI note argument\") \n  }\n  console.log(displayType)\n  let inFirstOctave = midiNumber % 12\n  let found = Object.keys(PITCH_INDEXES).filter((key) => PITCH_INDEXES[key] === inFirstOctave);\n\n  if (found.length > 1) {\n    return found[displayType]\n  }\n\n  return found[0]\n\n\n\n}\n\n//\n// Build cache for getAttributes\n//\nfunction buildMidiNumberAttributes(midiNumber) {\n  const pitchIndex = (midiNumber - MIDI_NUMBER_C0) % NOTES_IN_OCTAVE;\n  const octave = Math.floor((midiNumber - MIDI_NUMBER_C0) / NOTES_IN_OCTAVE);\n  const pitchName = SORTED_PITCHES[pitchIndex];\n  return {\n    note: `${pitchName}${octave}`,\n    pitchName,\n    octave,\n    midiNumber,\n    isAccidental: ACCIDENTAL_PITCHES.includes(pitchName),\n  };\n}\n\nfunction buildMidiNumberAttributesCache() {\n  return range(MIN_MIDI_NUMBER, MAX_MIDI_NUMBER + 1).reduce((cache, midiNumber) => {\n    cache[midiNumber] = buildMidiNumberAttributes(midiNumber);\n    return cache;\n  }, {});\n}\n\nconst midiNumberAttributesCache = buildMidiNumberAttributesCache();\n\n// Returns an object containing various attributes for a given MIDI number.\n// Throws error for invalid midiNumbers.\nfunction getAttributes(midiNumber) {\n  const attrs = midiNumberAttributesCache[midiNumber];\n  if (!attrs) {\n    throw Error('Invalid MIDI number');\n  }\n  return attrs;\n}\n\n// Returns all MIDI numbers corresponding to natural notes, e.g. C and not C# or Bb.\nconst NATURAL_MIDI_NUMBERS = range(MIN_MIDI_NUMBER, MAX_MIDI_NUMBER + 1).filter(\n  (midiNumber) => !getAttributes(midiNumber).isAccidental,\n);\n\nexport default {\n  fromNote,\n  noteNameFromMidi,\n  getAttributes,\n  MIN_MIDI_NUMBER,\n  MAX_MIDI_NUMBER,\n  NATURAL_MIDI_NUMBERS,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}