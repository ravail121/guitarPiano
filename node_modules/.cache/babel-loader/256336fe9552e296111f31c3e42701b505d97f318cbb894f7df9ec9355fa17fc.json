{"ast":null,"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport Soundfont from 'soundfont-player';\nclass SoundfontProvider extends React.Component {\n  constructor(props) {\n    super(props);\n    this.loadInstrument = instrumentName => {\n      // Re-trigger loading state\n      this.setState({\n        instrument: null\n      });\n      Soundfont.instrument(this.props.audioContext, instrumentName, {\n        format: this.props.format,\n        soundfont: this.props.soundfont,\n        nameToUrl: (name, soundfont, format) => {\n          return `${this.props.hostname}/${soundfont}/${name}-${format}.js`;\n        }\n      }).then(instrument => {\n        this.setState({\n          instrument\n        });\n      });\n    };\n    this.playNote = midiNumber => {\n      this.props.audioContext.resume().then(() => {\n        const audioNode = this.state.instrument.play(midiNumber);\n        this.setState({\n          activeAudioNodes: Object.assign({}, this.state.activeAudioNodes, {\n            [midiNumber]: audioNode\n          })\n        });\n      });\n    };\n    this.stopNote = midiNumber => {\n      this.props.audioContext.resume().then(() => {\n        if (!this.state.activeAudioNodes[midiNumber]) {\n          return;\n        }\n        const audioNode = this.state.activeAudioNodes[midiNumber];\n        audioNode.stop();\n        this.setState({\n          activeAudioNodes: Object.assign({}, this.state.activeAudioNodes, {\n            [midiNumber]: null\n          })\n        });\n      });\n    };\n    this.stopAllNotes = () => {\n      this.props.audioContext.resume().then(() => {\n        const activeAudioNodes = Object.values(this.state.activeAudioNodes);\n        activeAudioNodes.forEach(node => {\n          if (node) {\n            node.stop();\n          }\n        });\n        this.setState({\n          activeAudioNodes: {}\n        });\n      });\n    };\n    this.state = {\n      activeAudioNodes: {},\n      instrument: null\n    };\n  }\n  componentDidMount() {\n    this.loadInstrument(this.props.instrumentName);\n  }\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.instrumentName !== this.props.instrumentName) {\n      this.loadInstrument(this.props.instrumentName);\n    }\n  }\n  render() {\n    return this.props.render({\n      isLoading: !this.state.instrument,\n      playNote: this.playNote,\n      stopNote: this.stopNote,\n      stopAllNotes: this.stopAllNotes\n    });\n  }\n}\nSoundfontProvider.propTypes = {\n  instrumentName: PropTypes.string.isRequired,\n  hostname: PropTypes.string.isRequired,\n  format: PropTypes.oneOf(['mp3', 'ogg']),\n  soundfont: PropTypes.oneOf(['MusyngKite', 'FluidR3_GM']),\n  audioContext: PropTypes.instanceOf(window.AudioContext),\n  render: PropTypes.func\n};\nSoundfontProvider.defaultProps = {\n  format: 'mp3',\n  soundfont: 'MusyngKite',\n  instrumentName: 'acoustic_grand_piano'\n};\nexport default SoundfontProvider;","map":{"version":3,"names":["React","PropTypes","Soundfont","SoundfontProvider","Component","constructor","props","loadInstrument","instrumentName","setState","instrument","audioContext","format","soundfont","nameToUrl","name","hostname","then","playNote","midiNumber","resume","audioNode","state","play","activeAudioNodes","Object","assign","stopNote","stop","stopAllNotes","values","forEach","node","componentDidMount","componentDidUpdate","prevProps","prevState","render","isLoading","propTypes","string","isRequired","oneOf","instanceOf","window","AudioContext","func","defaultProps"],"sources":["/Users/macbook/Desktop/Music/OwnGuitar/src/soundfontprovider.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Soundfont from 'soundfont-player';\n\nclass SoundfontProvider extends React.Component {\n  static propTypes = {\n    instrumentName: PropTypes.string.isRequired,\n    hostname: PropTypes.string.isRequired,\n    format: PropTypes.oneOf(['mp3', 'ogg']),\n    soundfont: PropTypes.oneOf(['MusyngKite', 'FluidR3_GM']),\n    audioContext: PropTypes.instanceOf(window.AudioContext),\n    render: PropTypes.func,\n  };\n\n  static defaultProps = {\n    format: 'mp3',\n    soundfont: 'MusyngKite',\n    instrumentName: 'acoustic_grand_piano',\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeAudioNodes: {},\n      instrument: null,\n    };\n  }\n\n  componentDidMount() {\n    this.loadInstrument(this.props.instrumentName);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.instrumentName !== this.props.instrumentName) {\n      this.loadInstrument(this.props.instrumentName);\n    }\n  }\n\n  loadInstrument = instrumentName => {\n    // Re-trigger loading state\n    this.setState({\n      instrument: null,\n    });\n    Soundfont.instrument(this.props.audioContext, instrumentName, {\n      format: this.props.format,\n      soundfont: this.props.soundfont,\n      nameToUrl: (name, soundfont, format) => {\n        return `${this.props.hostname}/${soundfont}/${name}-${format}.js`;\n      },\n    }).then(instrument => {\n      this.setState({\n        instrument,\n      });\n    });\n  };\n\n  playNote = midiNumber => {\n    this.props.audioContext.resume().then(() => {\n      const audioNode = this.state.instrument.play(midiNumber);\n      this.setState({\n        activeAudioNodes: Object.assign({}, this.state.activeAudioNodes, {\n          [midiNumber]: audioNode,\n        }),\n      });\n    });\n  };\n\n  stopNote = midiNumber => {\n    this.props.audioContext.resume().then(() => {\n      if (!this.state.activeAudioNodes[midiNumber]) {\n        return;\n      }\n      const audioNode = this.state.activeAudioNodes[midiNumber];\n      audioNode.stop();\n      this.setState({\n        activeAudioNodes: Object.assign({}, this.state.activeAudioNodes, {\n          [midiNumber]: null,\n        }),\n      });\n    });\n  };\n\n  // Clear any residual notes that don't get called with stopNote\n  stopAllNotes = () => {\n    this.props.audioContext.resume().then(() => {\n      const activeAudioNodes = Object.values(this.state.activeAudioNodes);\n      activeAudioNodes.forEach(node => {\n        if (node) {\n          node.stop();\n        }\n      });\n      this.setState({\n        activeAudioNodes: {},\n      });\n    });\n  };\n\n  render() {\n    return this.props.render({\n      isLoading: !this.state.instrument,\n      playNote: this.playNote,\n      stopNote: this.stopNote,\n      stopAllNotes: this.stopAllNotes,\n    });\n  }\n}\n\nexport default SoundfontProvider;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}