{"ast":null,"code":"import { connect, connectSeries, ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { CrossFade } from \"../component/channel/CrossFade\";\nimport { Split } from \"../component/channel/Split\";\nimport { Gain } from \"../core/context/Gain\";\nimport { Merge } from \"../component/channel/Merge\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * Base class for Stereo effects.\n */\nexport class StereoEffect extends ToneAudioNode {\n  constructor(options) {\n    super(options);\n    this.name = \"StereoEffect\";\n    this.input = new Gain({\n      context: this.context\n    });\n    // force mono sources to be stereo\n    this.input.channelCount = 2;\n    this.input.channelCountMode = \"explicit\";\n    this._dryWet = this.output = new CrossFade({\n      context: this.context,\n      fade: options.wet\n    });\n    this.wet = this._dryWet.fade;\n    this._split = new Split({\n      context: this.context,\n      channels: 2\n    });\n    this._merge = new Merge({\n      context: this.context,\n      channels: 2\n    });\n    // connections\n    this.input.connect(this._split);\n    // dry wet connections\n    this.input.connect(this._dryWet.a);\n    this._merge.connect(this._dryWet.b);\n    readOnly(this, [\"wet\"]);\n  }\n  /**\n   * Connect the left part of the effect\n   */\n  connectEffectLeft() {\n    var _ref;\n    this._split.connect(arguments.length <= 0 ? undefined : arguments[0], 0, 0);\n    connectSeries(...arguments);\n    connect((_ref = arguments.length - 1, _ref < 0 || arguments.length <= _ref ? undefined : arguments[_ref]), this._merge, 0, 0);\n  }\n  /**\n   * Connect the right part of the effect\n   */\n  connectEffectRight() {\n    var _ref2;\n    this._split.connect(arguments.length <= 0 ? undefined : arguments[0], 1, 0);\n    connectSeries(...arguments);\n    connect((_ref2 = arguments.length - 1, _ref2 < 0 || arguments.length <= _ref2 ? undefined : arguments[_ref2]), this._merge, 0, 1);\n  }\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      wet: 1\n    });\n  }\n  dispose() {\n    super.dispose();\n    this._dryWet.dispose();\n    this._split.dispose();\n    this._merge.dispose();\n    return this;\n  }\n}","map":{"version":3,"mappings":"AACA,SAASA,OAAO,EAAEC,aAAa,EAAcC,aAAa,QAAQ,+BAA+B;AACjG,SAASC,SAAS,QAAQ,gCAAgC;AAE1D,SAASC,KAAK,QAAQ,4BAA4B;AAClD,SAASC,IAAI,QAAQ,sBAAsB;AAC3C,SAASC,KAAK,QAAQ,4BAA4B;AAClD,SAASC,QAAQ,QAAQ,wBAAwB;AAIjD;;;AAGA,OAAM,MAAOC,YAAkD,SAAQN,aAAsB;EA4B5FO,YAAYC,OAA4B;IAEvC,KAAK,CAACA,OAAO,CAAC;IA5BN,SAAI,GAAW,cAAc;IA8BrC,IAAI,CAACC,KAAK,GAAG,IAAIN,IAAI,CAAC;MAAEO,OAAO,EAAE,IAAI,CAACA;IAAO,CAAE,CAAC;IAChD;IACA,IAAI,CAACD,KAAK,CAACE,YAAY,GAAG,CAAC;IAC3B,IAAI,CAACF,KAAK,CAACG,gBAAgB,GAAG,UAAU;IAExC,IAAI,CAACC,OAAO,GAAG,IAAI,CAACC,MAAM,GAAG,IAAIb,SAAS,CAAC;MAC1CS,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBK,IAAI,EAAEP,OAAO,CAACQ;KACd,CAAC;IACF,IAAI,CAACA,GAAG,GAAG,IAAI,CAACH,OAAO,CAACE,IAAI;IAC5B,IAAI,CAACE,MAAM,GAAG,IAAIf,KAAK,CAAC;MAAEQ,OAAO,EAAE,IAAI,CAACA,OAAO;MAAEQ,QAAQ,EAAE;IAAC,CAAE,CAAC;IAC/D,IAAI,CAACC,MAAM,GAAG,IAAIf,KAAK,CAAC;MAAEM,OAAO,EAAE,IAAI,CAACA,OAAO;MAAEQ,QAAQ,EAAE;IAAC,CAAE,CAAC;IAE/D;IACA,IAAI,CAACT,KAAK,CAACX,OAAO,CAAC,IAAI,CAACmB,MAAM,CAAC;IAC/B;IACA,IAAI,CAACR,KAAK,CAACX,OAAO,CAAC,IAAI,CAACe,OAAO,CAACO,CAAC,CAAC;IAClC,IAAI,CAACD,MAAM,CAACrB,OAAO,CAAC,IAAI,CAACe,OAAO,CAACQ,CAAC,CAAC;IACnChB,QAAQ,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,CAAC;EACxB;EAEA;;;EAGUiB,iBAAiB,GAAuB;IAAA;IACjD,IAAI,CAACL,MAAM,CAACnB,OAAO,mDAAW,CAAC,EAAE,CAAC,CAAC;IACnCC,aAAa,CAAC,YAAQ,CAAC;IACvBD,OAAO,SAAO,UAAMyB,MAAM,GAAC,CAAC,uEAAG,IAAI,CAACJ,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC;EAClD;EAEA;;;EAGUK,kBAAkB,GAAuB;IAAA;IAClD,IAAI,CAACP,MAAM,CAACnB,OAAO,mDAAW,CAAC,EAAE,CAAC,CAAC;IACnCC,aAAa,CAAC,YAAQ,CAAC;IACvBD,OAAO,UAAO,UAAMyB,MAAM,GAAC,CAAC,0EAAG,IAAI,CAACJ,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC;EAClD;EAEA,OAAOM,WAAW;IACjB,OAAOC,MAAM,CAACC,MAAM,CAAC3B,aAAa,CAACyB,WAAW,EAAE,EAAE;MACjDT,GAAG,EAAE;KACL,CAAC;EACH;EAEAY,OAAO;IACN,KAAK,CAACA,OAAO,EAAE;IACf,IAAI,CAACf,OAAO,CAACe,OAAO,EAAE;IACtB,IAAI,CAACX,MAAM,CAACW,OAAO,EAAE;IACrB,IAAI,CAACT,MAAM,CAACS,OAAO,EAAE;IACrB,OAAO,IAAI;EACZ","names":["connect","connectSeries","ToneAudioNode","CrossFade","Split","Gain","Merge","readOnly","StereoEffect","constructor","options","input","context","channelCount","channelCountMode","_dryWet","output","fade","wet","_split","channels","_merge","a","b","connectEffectLeft","length","connectEffectRight","getDefaults","Object","assign","dispose"],"sources":["/Users/macbook/Desktop/Music/OwnGuitar/node_modules/tone/Tone/effect/StereoEffect.ts"],"sourcesContent":["import { EffectOptions } from \"./Effect\";\nimport { connect, connectSeries, OutputNode, ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { CrossFade } from \"../component/channel/CrossFade\";\nimport { Signal } from \"../signal/Signal\";\nimport { Split } from \"../component/channel/Split\";\nimport { Gain } from \"../core/context/Gain\";\nimport { Merge } from \"../component/channel/Merge\";\nimport { readOnly } from \"../core/util/Interface\";\n\nexport type StereoEffectOptions = EffectOptions;\n\n/**\n * Base class for Stereo effects.\n */\nexport class StereoEffect<Options extends StereoEffectOptions> extends ToneAudioNode<Options> {\n\n\treadonly name: string = \"StereoEffect\";\n\n\treadonly input: Gain;\n\treadonly output: CrossFade;\n\n\t/**\n\t * the drywet knob to control the amount of effect\n\t */\n\tprivate _dryWet: CrossFade;\n\t\n\t/**\n\t * The wet control, i.e. how much of the effected\n\t * will pass through to the output.\n\t */\n\treadonly wet: Signal<\"normalRange\">;\n\t\n\t/**\n\t * Split it\n\t */\n\tprotected _split: Split;\n\t\n\t/**\n\t * the stereo effect merger\n\t */\n\tprotected _merge: Merge;\n\n\tconstructor(options: StereoEffectOptions) {\n\n\t\tsuper(options);\n\n\t\tthis.input = new Gain({ context: this.context });\n\t\t// force mono sources to be stereo\n\t\tthis.input.channelCount = 2;\n\t\tthis.input.channelCountMode = \"explicit\";\n\n\t\tthis._dryWet = this.output = new CrossFade({\n\t\t\tcontext: this.context,\n\t\t\tfade: options.wet\n\t\t});\n\t\tthis.wet = this._dryWet.fade;\n\t\tthis._split = new Split({ context: this.context, channels: 2 });\n\t\tthis._merge = new Merge({ context: this.context, channels: 2 });\n\n\t\t// connections\n\t\tthis.input.connect(this._split);\n\t\t// dry wet connections\n\t\tthis.input.connect(this._dryWet.a);\n\t\tthis._merge.connect(this._dryWet.b);\n\t\treadOnly(this, [\"wet\"]);\n\t}\n\t\n\t/**\n\t * Connect the left part of the effect\n\t */\n\tprotected connectEffectLeft(...nodes: OutputNode[]): void{\n\t\tthis._split.connect(nodes[0], 0, 0);\n\t\tconnectSeries(...nodes);\n\t\tconnect(nodes[nodes.length-1], this._merge, 0, 0);\n\t}\n\t\n\t/**\n\t * Connect the right part of the effect\n\t */\n\tprotected connectEffectRight(...nodes: OutputNode[]): void{\n\t\tthis._split.connect(nodes[0], 1, 0);\n\t\tconnectSeries(...nodes);\n\t\tconnect(nodes[nodes.length-1], this._merge, 0, 1);\n\t}\n\n\tstatic getDefaults(): StereoEffectOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\twet: 1,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._dryWet.dispose();\n\t\tthis._split.dispose();\n\t\tthis._merge.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}