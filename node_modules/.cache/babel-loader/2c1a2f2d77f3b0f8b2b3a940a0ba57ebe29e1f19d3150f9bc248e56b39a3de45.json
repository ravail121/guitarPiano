{"ast":null,"code":"import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { interceptConnections } from '../helpers/intercept-connections';\nexport const createNativePannerNodeFakerFactory = (connectNativeAudioNodeToNativeAudioNode, createInvalidStateError, createNativeChannelMergerNode, createNativeGainNode, createNativeScriptProcessorNode, createNativeWaveShaperNode, createNotSupportedError, disconnectNativeAudioNodeFromNativeAudioNode, getFirstSample, monitorConnections) => {\n  return (nativeContext, _ref) => {\n    let {\n      coneInnerAngle,\n      coneOuterAngle,\n      coneOuterGain,\n      distanceModel,\n      maxDistance,\n      orientationX,\n      orientationY,\n      orientationZ,\n      panningModel,\n      positionX,\n      positionY,\n      positionZ,\n      refDistance,\n      rolloffFactor,\n      ...audioNodeOptions\n    } = _ref;\n    const pannerNode = nativeContext.createPanner();\n    // Bug #125: Safari does not throw an error yet.\n    if (audioNodeOptions.channelCount > 2) {\n      throw createNotSupportedError();\n    }\n    // Bug #126: Safari does not throw an error yet.\n    if (audioNodeOptions.channelCountMode === 'max') {\n      throw createNotSupportedError();\n    }\n    assignNativeAudioNodeOptions(pannerNode, audioNodeOptions);\n    const SINGLE_CHANNEL_OPTIONS = {\n      channelCount: 1,\n      channelCountMode: 'explicit',\n      channelInterpretation: 'discrete'\n    };\n    const channelMergerNode = createNativeChannelMergerNode(nativeContext, {\n      ...SINGLE_CHANNEL_OPTIONS,\n      channelInterpretation: 'speakers',\n      numberOfInputs: 6\n    });\n    const inputGainNode = createNativeGainNode(nativeContext, {\n      ...audioNodeOptions,\n      gain: 1\n    });\n    const orientationXGainNode = createNativeGainNode(nativeContext, {\n      ...SINGLE_CHANNEL_OPTIONS,\n      gain: 1\n    });\n    const orientationYGainNode = createNativeGainNode(nativeContext, {\n      ...SINGLE_CHANNEL_OPTIONS,\n      gain: 0\n    });\n    const orientationZGainNode = createNativeGainNode(nativeContext, {\n      ...SINGLE_CHANNEL_OPTIONS,\n      gain: 0\n    });\n    const positionXGainNode = createNativeGainNode(nativeContext, {\n      ...SINGLE_CHANNEL_OPTIONS,\n      gain: 0\n    });\n    const positionYGainNode = createNativeGainNode(nativeContext, {\n      ...SINGLE_CHANNEL_OPTIONS,\n      gain: 0\n    });\n    const positionZGainNode = createNativeGainNode(nativeContext, {\n      ...SINGLE_CHANNEL_OPTIONS,\n      gain: 0\n    });\n    const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, 256, 6, 1);\n    const waveShaperNode = createNativeWaveShaperNode(nativeContext, {\n      ...SINGLE_CHANNEL_OPTIONS,\n      curve: new Float32Array([1, 1]),\n      oversample: 'none'\n    });\n    let lastOrientation = [orientationX, orientationY, orientationZ];\n    let lastPosition = [positionX, positionY, positionZ];\n    const buffer = new Float32Array(1);\n    // tslint:disable-next-line:deprecation\n    scriptProcessorNode.onaudioprocess = _ref2 => {\n      let {\n        inputBuffer\n      } = _ref2;\n      const orientation = [getFirstSample(inputBuffer, buffer, 0), getFirstSample(inputBuffer, buffer, 1), getFirstSample(inputBuffer, buffer, 2)];\n      if (orientation.some((value, index) => value !== lastOrientation[index])) {\n        pannerNode.setOrientation(...orientation); // tslint:disable-line:deprecation\n        lastOrientation = orientation;\n      }\n      const positon = [getFirstSample(inputBuffer, buffer, 3), getFirstSample(inputBuffer, buffer, 4), getFirstSample(inputBuffer, buffer, 5)];\n      if (positon.some((value, index) => value !== lastPosition[index])) {\n        pannerNode.setPosition(...positon); // tslint:disable-line:deprecation\n        lastPosition = positon;\n      }\n    };\n    Object.defineProperty(orientationYGainNode.gain, 'defaultValue', {\n      get: () => 0\n    });\n    Object.defineProperty(orientationZGainNode.gain, 'defaultValue', {\n      get: () => 0\n    });\n    Object.defineProperty(positionXGainNode.gain, 'defaultValue', {\n      get: () => 0\n    });\n    Object.defineProperty(positionYGainNode.gain, 'defaultValue', {\n      get: () => 0\n    });\n    Object.defineProperty(positionZGainNode.gain, 'defaultValue', {\n      get: () => 0\n    });\n    const nativePannerNodeFaker = {\n      get bufferSize() {\n        return undefined;\n      },\n      get channelCount() {\n        return pannerNode.channelCount;\n      },\n      set channelCount(value) {\n        // Bug #125: Safari does not throw an error yet.\n        if (value > 2) {\n          throw createNotSupportedError();\n        }\n        inputGainNode.channelCount = value;\n        pannerNode.channelCount = value;\n      },\n      get channelCountMode() {\n        return pannerNode.channelCountMode;\n      },\n      set channelCountMode(value) {\n        // Bug #126: Safari does not throw an error yet.\n        if (value === 'max') {\n          throw createNotSupportedError();\n        }\n        inputGainNode.channelCountMode = value;\n        pannerNode.channelCountMode = value;\n      },\n      get channelInterpretation() {\n        return pannerNode.channelInterpretation;\n      },\n      set channelInterpretation(value) {\n        inputGainNode.channelInterpretation = value;\n        pannerNode.channelInterpretation = value;\n      },\n      get coneInnerAngle() {\n        return pannerNode.coneInnerAngle;\n      },\n      set coneInnerAngle(value) {\n        pannerNode.coneInnerAngle = value;\n      },\n      get coneOuterAngle() {\n        return pannerNode.coneOuterAngle;\n      },\n      set coneOuterAngle(value) {\n        pannerNode.coneOuterAngle = value;\n      },\n      get coneOuterGain() {\n        return pannerNode.coneOuterGain;\n      },\n      set coneOuterGain(value) {\n        // Bug #127: Safari does not throw an InvalidStateError yet.\n        if (value < 0 || value > 1) {\n          throw createInvalidStateError();\n        }\n        pannerNode.coneOuterGain = value;\n      },\n      get context() {\n        return pannerNode.context;\n      },\n      get distanceModel() {\n        return pannerNode.distanceModel;\n      },\n      set distanceModel(value) {\n        pannerNode.distanceModel = value;\n      },\n      get inputs() {\n        return [inputGainNode];\n      },\n      get maxDistance() {\n        return pannerNode.maxDistance;\n      },\n      set maxDistance(value) {\n        // Bug #128: Safari does not throw an error yet.\n        if (value < 0) {\n          throw new RangeError();\n        }\n        pannerNode.maxDistance = value;\n      },\n      get numberOfInputs() {\n        return pannerNode.numberOfInputs;\n      },\n      get numberOfOutputs() {\n        return pannerNode.numberOfOutputs;\n      },\n      get orientationX() {\n        return orientationXGainNode.gain;\n      },\n      get orientationY() {\n        return orientationYGainNode.gain;\n      },\n      get orientationZ() {\n        return orientationZGainNode.gain;\n      },\n      get panningModel() {\n        return pannerNode.panningModel;\n      },\n      set panningModel(value) {\n        pannerNode.panningModel = value;\n      },\n      get positionX() {\n        return positionXGainNode.gain;\n      },\n      get positionY() {\n        return positionYGainNode.gain;\n      },\n      get positionZ() {\n        return positionZGainNode.gain;\n      },\n      get refDistance() {\n        return pannerNode.refDistance;\n      },\n      set refDistance(value) {\n        // Bug #129: Safari does not throw an error yet.\n        if (value < 0) {\n          throw new RangeError();\n        }\n        pannerNode.refDistance = value;\n      },\n      get rolloffFactor() {\n        return pannerNode.rolloffFactor;\n      },\n      set rolloffFactor(value) {\n        // Bug #130: Safari does not throw an error yet.\n        if (value < 0) {\n          throw new RangeError();\n        }\n        pannerNode.rolloffFactor = value;\n      },\n      addEventListener() {\n        return inputGainNode.addEventListener(arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1], arguments.length <= 2 ? undefined : arguments[2]);\n      },\n      dispatchEvent() {\n        return inputGainNode.dispatchEvent(arguments.length <= 0 ? undefined : arguments[0]);\n      },\n      removeEventListener() {\n        return inputGainNode.removeEventListener(arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1], arguments.length <= 2 ? undefined : arguments[2]);\n      }\n    };\n    if (coneInnerAngle !== nativePannerNodeFaker.coneInnerAngle) {\n      nativePannerNodeFaker.coneInnerAngle = coneInnerAngle;\n    }\n    if (coneOuterAngle !== nativePannerNodeFaker.coneOuterAngle) {\n      nativePannerNodeFaker.coneOuterAngle = coneOuterAngle;\n    }\n    if (coneOuterGain !== nativePannerNodeFaker.coneOuterGain) {\n      nativePannerNodeFaker.coneOuterGain = coneOuterGain;\n    }\n    if (distanceModel !== nativePannerNodeFaker.distanceModel) {\n      nativePannerNodeFaker.distanceModel = distanceModel;\n    }\n    if (maxDistance !== nativePannerNodeFaker.maxDistance) {\n      nativePannerNodeFaker.maxDistance = maxDistance;\n    }\n    if (orientationX !== nativePannerNodeFaker.orientationX.value) {\n      nativePannerNodeFaker.orientationX.value = orientationX;\n    }\n    if (orientationY !== nativePannerNodeFaker.orientationY.value) {\n      nativePannerNodeFaker.orientationY.value = orientationY;\n    }\n    if (orientationZ !== nativePannerNodeFaker.orientationZ.value) {\n      nativePannerNodeFaker.orientationZ.value = orientationZ;\n    }\n    if (panningModel !== nativePannerNodeFaker.panningModel) {\n      nativePannerNodeFaker.panningModel = panningModel;\n    }\n    if (positionX !== nativePannerNodeFaker.positionX.value) {\n      nativePannerNodeFaker.positionX.value = positionX;\n    }\n    if (positionY !== nativePannerNodeFaker.positionY.value) {\n      nativePannerNodeFaker.positionY.value = positionY;\n    }\n    if (positionZ !== nativePannerNodeFaker.positionZ.value) {\n      nativePannerNodeFaker.positionZ.value = positionZ;\n    }\n    if (refDistance !== nativePannerNodeFaker.refDistance) {\n      nativePannerNodeFaker.refDistance = refDistance;\n    }\n    if (rolloffFactor !== nativePannerNodeFaker.rolloffFactor) {\n      nativePannerNodeFaker.rolloffFactor = rolloffFactor;\n    }\n    if (lastOrientation[0] !== 1 || lastOrientation[1] !== 0 || lastOrientation[2] !== 0) {\n      pannerNode.setOrientation(...lastOrientation); // tslint:disable-line:deprecation\n    }\n\n    if (lastPosition[0] !== 0 || lastPosition[1] !== 0 || lastPosition[2] !== 0) {\n      pannerNode.setPosition(...lastPosition); // tslint:disable-line:deprecation\n    }\n\n    const whenConnected = () => {\n      inputGainNode.connect(pannerNode);\n      // Bug #119: Safari does not fully support the WaveShaperNode.\n      connectNativeAudioNodeToNativeAudioNode(inputGainNode, waveShaperNode, 0, 0);\n      waveShaperNode.connect(orientationXGainNode).connect(channelMergerNode, 0, 0);\n      waveShaperNode.connect(orientationYGainNode).connect(channelMergerNode, 0, 1);\n      waveShaperNode.connect(orientationZGainNode).connect(channelMergerNode, 0, 2);\n      waveShaperNode.connect(positionXGainNode).connect(channelMergerNode, 0, 3);\n      waveShaperNode.connect(positionYGainNode).connect(channelMergerNode, 0, 4);\n      waveShaperNode.connect(positionZGainNode).connect(channelMergerNode, 0, 5);\n      channelMergerNode.connect(scriptProcessorNode).connect(nativeContext.destination);\n    };\n    const whenDisconnected = () => {\n      inputGainNode.disconnect(pannerNode);\n      // Bug #119: Safari does not fully support the WaveShaperNode.\n      disconnectNativeAudioNodeFromNativeAudioNode(inputGainNode, waveShaperNode, 0, 0);\n      waveShaperNode.disconnect(orientationXGainNode);\n      orientationXGainNode.disconnect(channelMergerNode);\n      waveShaperNode.disconnect(orientationYGainNode);\n      orientationYGainNode.disconnect(channelMergerNode);\n      waveShaperNode.disconnect(orientationZGainNode);\n      orientationZGainNode.disconnect(channelMergerNode);\n      waveShaperNode.disconnect(positionXGainNode);\n      positionXGainNode.disconnect(channelMergerNode);\n      waveShaperNode.disconnect(positionYGainNode);\n      positionYGainNode.disconnect(channelMergerNode);\n      waveShaperNode.disconnect(positionZGainNode);\n      positionZGainNode.disconnect(channelMergerNode);\n      channelMergerNode.disconnect(scriptProcessorNode);\n      scriptProcessorNode.disconnect(nativeContext.destination);\n    };\n    return monitorConnections(interceptConnections(nativePannerNodeFaker, pannerNode), whenConnected, whenDisconnected);\n  };\n};","map":{"version":3,"mappings":"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","names":["assignNativeAudioNodeOptions","interceptConnections","createNativePannerNodeFakerFactory","connectNativeAudioNodeToNativeAudioNode","createInvalidStateError","createNativeChannelMergerNode","createNativeGainNode","createNativeScriptProcessorNode","createNativeWaveShaperNode","createNotSupportedError","disconnectNativeAudioNodeFromNativeAudioNode","getFirstSample","monitorConnections","nativeContext","coneInnerAngle","coneOuterAngle","coneOuterGain","distanceModel","maxDistance","orientationX","orientationY","orientationZ","panningModel","positionX","positionY","positionZ","refDistance","rolloffFactor","audioNodeOptions","pannerNode","createPanner","channelCount","channelCountMode","SINGLE_CHANNEL_OPTIONS","channelInterpretation","channelMergerNode","numberOfInputs","inputGainNode","gain","orientationXGainNode","orientationYGainNode","orientationZGainNode","positionXGainNode","positionYGainNode","positionZGainNode","scriptProcessorNode","waveShaperNode","curve","Float32Array","oversample","lastOrientation","lastPosition","buffer","onaudioprocess","inputBuffer","orientation","some","value","index","setOrientation","positon","setPosition","Object","defineProperty","get","nativePannerNodeFaker","bufferSize","undefined","context","inputs","RangeError","numberOfOutputs","addEventListener","dispatchEvent","removeEventListener","whenConnected","connect","destination","whenDisconnected","disconnect"],"sources":["/Users/macbook/Desktop/Music/OwnGuitar/node_modules/standardized-audio-context/src/factories/native-panner-node-faker-factory.ts"],"sourcesContent":["import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { interceptConnections } from '../helpers/intercept-connections';\nimport { TNativeAudioNode, TNativePannerNode, TNativePannerNodeFakerFactoryFactory } from '../types';\n\nexport const createNativePannerNodeFakerFactory: TNativePannerNodeFakerFactoryFactory = (\n    connectNativeAudioNodeToNativeAudioNode,\n    createInvalidStateError,\n    createNativeChannelMergerNode,\n    createNativeGainNode,\n    createNativeScriptProcessorNode,\n    createNativeWaveShaperNode,\n    createNotSupportedError,\n    disconnectNativeAudioNodeFromNativeAudioNode,\n    getFirstSample,\n    monitorConnections\n) => {\n    return (\n        nativeContext,\n        {\n            coneInnerAngle,\n            coneOuterAngle,\n            coneOuterGain,\n            distanceModel,\n            maxDistance,\n            orientationX,\n            orientationY,\n            orientationZ,\n            panningModel,\n            positionX,\n            positionY,\n            positionZ,\n            refDistance,\n            rolloffFactor,\n            ...audioNodeOptions\n        }\n    ) => {\n        const pannerNode = nativeContext.createPanner();\n\n        // Bug #125: Safari does not throw an error yet.\n        if (audioNodeOptions.channelCount > 2) {\n            throw createNotSupportedError();\n        }\n\n        // Bug #126: Safari does not throw an error yet.\n        if (audioNodeOptions.channelCountMode === 'max') {\n            throw createNotSupportedError();\n        }\n\n        assignNativeAudioNodeOptions(pannerNode, audioNodeOptions);\n\n        const SINGLE_CHANNEL_OPTIONS = {\n            channelCount: 1,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'discrete'\n        } as const;\n\n        const channelMergerNode = createNativeChannelMergerNode(nativeContext, {\n            ...SINGLE_CHANNEL_OPTIONS,\n            channelInterpretation: 'speakers',\n            numberOfInputs: 6\n        });\n        const inputGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, gain: 1 });\n        const orientationXGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 1 });\n        const orientationYGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        const orientationZGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        const positionXGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        const positionYGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        const positionZGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, 256, 6, 1);\n        const waveShaperNode = createNativeWaveShaperNode(nativeContext, {\n            ...SINGLE_CHANNEL_OPTIONS,\n            curve: new Float32Array([1, 1]),\n            oversample: 'none'\n        });\n\n        let lastOrientation: [number, number, number] = [orientationX, orientationY, orientationZ];\n        let lastPosition: [number, number, number] = [positionX, positionY, positionZ];\n\n        const buffer = new Float32Array(1);\n\n        // tslint:disable-next-line:deprecation\n        scriptProcessorNode.onaudioprocess = ({ inputBuffer }) => {\n            const orientation: [number, number, number] = [\n                getFirstSample(inputBuffer, buffer, 0),\n                getFirstSample(inputBuffer, buffer, 1),\n                getFirstSample(inputBuffer, buffer, 2)\n            ];\n\n            if (orientation.some((value, index) => value !== lastOrientation[index])) {\n                pannerNode.setOrientation(...orientation); // tslint:disable-line:deprecation\n\n                lastOrientation = orientation;\n            }\n\n            const positon: [number, number, number] = [\n                getFirstSample(inputBuffer, buffer, 3),\n                getFirstSample(inputBuffer, buffer, 4),\n                getFirstSample(inputBuffer, buffer, 5)\n            ];\n\n            if (positon.some((value, index) => value !== lastPosition[index])) {\n                pannerNode.setPosition(...positon); // tslint:disable-line:deprecation\n\n                lastPosition = positon;\n            }\n        };\n\n        Object.defineProperty(orientationYGainNode.gain, 'defaultValue', { get: () => 0 });\n        Object.defineProperty(orientationZGainNode.gain, 'defaultValue', { get: () => 0 });\n        Object.defineProperty(positionXGainNode.gain, 'defaultValue', { get: () => 0 });\n        Object.defineProperty(positionYGainNode.gain, 'defaultValue', { get: () => 0 });\n        Object.defineProperty(positionZGainNode.gain, 'defaultValue', { get: () => 0 });\n\n        const nativePannerNodeFaker = {\n            get bufferSize(): undefined {\n                return undefined;\n            },\n            get channelCount(): number {\n                return pannerNode.channelCount;\n            },\n            set channelCount(value) {\n                // Bug #125: Safari does not throw an error yet.\n                if (value > 2) {\n                    throw createNotSupportedError();\n                }\n\n                inputGainNode.channelCount = value;\n                pannerNode.channelCount = value;\n            },\n            get channelCountMode(): TNativePannerNode['channelCountMode'] {\n                return pannerNode.channelCountMode;\n            },\n            set channelCountMode(value) {\n                // Bug #126: Safari does not throw an error yet.\n                if (value === 'max') {\n                    throw createNotSupportedError();\n                }\n\n                inputGainNode.channelCountMode = value;\n                pannerNode.channelCountMode = value;\n            },\n            get channelInterpretation(): TNativePannerNode['channelInterpretation'] {\n                return pannerNode.channelInterpretation;\n            },\n            set channelInterpretation(value) {\n                inputGainNode.channelInterpretation = value;\n                pannerNode.channelInterpretation = value;\n            },\n            get coneInnerAngle(): TNativePannerNode['coneInnerAngle'] {\n                return pannerNode.coneInnerAngle;\n            },\n            set coneInnerAngle(value) {\n                pannerNode.coneInnerAngle = value;\n            },\n            get coneOuterAngle(): TNativePannerNode['coneOuterAngle'] {\n                return pannerNode.coneOuterAngle;\n            },\n            set coneOuterAngle(value) {\n                pannerNode.coneOuterAngle = value;\n            },\n            get coneOuterGain(): TNativePannerNode['coneOuterGain'] {\n                return pannerNode.coneOuterGain;\n            },\n            set coneOuterGain(value) {\n                // Bug #127: Safari does not throw an InvalidStateError yet.\n                if (value < 0 || value > 1) {\n                    throw createInvalidStateError();\n                }\n\n                pannerNode.coneOuterGain = value;\n            },\n            get context(): TNativePannerNode['context'] {\n                return pannerNode.context;\n            },\n            get distanceModel(): TNativePannerNode['distanceModel'] {\n                return pannerNode.distanceModel;\n            },\n            set distanceModel(value) {\n                pannerNode.distanceModel = value;\n            },\n            get inputs(): TNativeAudioNode[] {\n                return [inputGainNode];\n            },\n            get maxDistance(): TNativePannerNode['maxDistance'] {\n                return pannerNode.maxDistance;\n            },\n            set maxDistance(value) {\n                // Bug #128: Safari does not throw an error yet.\n                if (value < 0) {\n                    throw new RangeError();\n                }\n\n                pannerNode.maxDistance = value;\n            },\n            get numberOfInputs(): number {\n                return pannerNode.numberOfInputs;\n            },\n            get numberOfOutputs(): number {\n                return pannerNode.numberOfOutputs;\n            },\n            get orientationX(): TNativePannerNode['orientationX'] {\n                return orientationXGainNode.gain;\n            },\n            get orientationY(): TNativePannerNode['orientationY'] {\n                return orientationYGainNode.gain;\n            },\n            get orientationZ(): TNativePannerNode['orientationZ'] {\n                return orientationZGainNode.gain;\n            },\n            get panningModel(): TNativePannerNode['panningModel'] {\n                return pannerNode.panningModel;\n            },\n            set panningModel(value) {\n                pannerNode.panningModel = value;\n            },\n            get positionX(): TNativePannerNode['positionX'] {\n                return positionXGainNode.gain;\n            },\n            get positionY(): TNativePannerNode['positionY'] {\n                return positionYGainNode.gain;\n            },\n            get positionZ(): TNativePannerNode['positionZ'] {\n                return positionZGainNode.gain;\n            },\n            get refDistance(): TNativePannerNode['refDistance'] {\n                return pannerNode.refDistance;\n            },\n            set refDistance(value) {\n                // Bug #129: Safari does not throw an error yet.\n                if (value < 0) {\n                    throw new RangeError();\n                }\n\n                pannerNode.refDistance = value;\n            },\n            get rolloffFactor(): TNativePannerNode['rolloffFactor'] {\n                return pannerNode.rolloffFactor;\n            },\n            set rolloffFactor(value) {\n                // Bug #130: Safari does not throw an error yet.\n                if (value < 0) {\n                    throw new RangeError();\n                }\n\n                pannerNode.rolloffFactor = value;\n            },\n            addEventListener(...args: any[]): void {\n                return inputGainNode.addEventListener(args[0], args[1], args[2]);\n            },\n            dispatchEvent(...args: any[]): boolean {\n                return inputGainNode.dispatchEvent(args[0]);\n            },\n            removeEventListener(...args: any[]): void {\n                return inputGainNode.removeEventListener(args[0], args[1], args[2]);\n            }\n        };\n\n        if (coneInnerAngle !== nativePannerNodeFaker.coneInnerAngle) {\n            nativePannerNodeFaker.coneInnerAngle = coneInnerAngle;\n        }\n\n        if (coneOuterAngle !== nativePannerNodeFaker.coneOuterAngle) {\n            nativePannerNodeFaker.coneOuterAngle = coneOuterAngle;\n        }\n\n        if (coneOuterGain !== nativePannerNodeFaker.coneOuterGain) {\n            nativePannerNodeFaker.coneOuterGain = coneOuterGain;\n        }\n\n        if (distanceModel !== nativePannerNodeFaker.distanceModel) {\n            nativePannerNodeFaker.distanceModel = distanceModel;\n        }\n\n        if (maxDistance !== nativePannerNodeFaker.maxDistance) {\n            nativePannerNodeFaker.maxDistance = maxDistance;\n        }\n\n        if (orientationX !== nativePannerNodeFaker.orientationX.value) {\n            nativePannerNodeFaker.orientationX.value = orientationX;\n        }\n\n        if (orientationY !== nativePannerNodeFaker.orientationY.value) {\n            nativePannerNodeFaker.orientationY.value = orientationY;\n        }\n\n        if (orientationZ !== nativePannerNodeFaker.orientationZ.value) {\n            nativePannerNodeFaker.orientationZ.value = orientationZ;\n        }\n\n        if (panningModel !== nativePannerNodeFaker.panningModel) {\n            nativePannerNodeFaker.panningModel = panningModel;\n        }\n\n        if (positionX !== nativePannerNodeFaker.positionX.value) {\n            nativePannerNodeFaker.positionX.value = positionX;\n        }\n\n        if (positionY !== nativePannerNodeFaker.positionY.value) {\n            nativePannerNodeFaker.positionY.value = positionY;\n        }\n\n        if (positionZ !== nativePannerNodeFaker.positionZ.value) {\n            nativePannerNodeFaker.positionZ.value = positionZ;\n        }\n\n        if (refDistance !== nativePannerNodeFaker.refDistance) {\n            nativePannerNodeFaker.refDistance = refDistance;\n        }\n\n        if (rolloffFactor !== nativePannerNodeFaker.rolloffFactor) {\n            nativePannerNodeFaker.rolloffFactor = rolloffFactor;\n        }\n\n        if (lastOrientation[0] !== 1 || lastOrientation[1] !== 0 || lastOrientation[2] !== 0) {\n            pannerNode.setOrientation(...lastOrientation); // tslint:disable-line:deprecation\n        }\n\n        if (lastPosition[0] !== 0 || lastPosition[1] !== 0 || lastPosition[2] !== 0) {\n            pannerNode.setPosition(...lastPosition); // tslint:disable-line:deprecation\n        }\n\n        const whenConnected = () => {\n            inputGainNode.connect(pannerNode);\n\n            // Bug #119: Safari does not fully support the WaveShaperNode.\n            connectNativeAudioNodeToNativeAudioNode(inputGainNode, waveShaperNode, 0, 0);\n\n            waveShaperNode.connect(orientationXGainNode).connect(channelMergerNode, 0, 0);\n            waveShaperNode.connect(orientationYGainNode).connect(channelMergerNode, 0, 1);\n            waveShaperNode.connect(orientationZGainNode).connect(channelMergerNode, 0, 2);\n            waveShaperNode.connect(positionXGainNode).connect(channelMergerNode, 0, 3);\n            waveShaperNode.connect(positionYGainNode).connect(channelMergerNode, 0, 4);\n            waveShaperNode.connect(positionZGainNode).connect(channelMergerNode, 0, 5);\n\n            channelMergerNode.connect(scriptProcessorNode).connect(nativeContext.destination);\n        };\n        const whenDisconnected = () => {\n            inputGainNode.disconnect(pannerNode);\n\n            // Bug #119: Safari does not fully support the WaveShaperNode.\n            disconnectNativeAudioNodeFromNativeAudioNode(inputGainNode, waveShaperNode, 0, 0);\n\n            waveShaperNode.disconnect(orientationXGainNode);\n            orientationXGainNode.disconnect(channelMergerNode);\n            waveShaperNode.disconnect(orientationYGainNode);\n            orientationYGainNode.disconnect(channelMergerNode);\n            waveShaperNode.disconnect(orientationZGainNode);\n            orientationZGainNode.disconnect(channelMergerNode);\n            waveShaperNode.disconnect(positionXGainNode);\n            positionXGainNode.disconnect(channelMergerNode);\n            waveShaperNode.disconnect(positionYGainNode);\n            positionYGainNode.disconnect(channelMergerNode);\n            waveShaperNode.disconnect(positionZGainNode);\n            positionZGainNode.disconnect(channelMergerNode);\n\n            channelMergerNode.disconnect(scriptProcessorNode);\n            scriptProcessorNode.disconnect(nativeContext.destination);\n        };\n\n        return monitorConnections(interceptConnections(nativePannerNodeFaker, pannerNode), whenConnected, whenDisconnected);\n    };\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}