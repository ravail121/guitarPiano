{"ast":null,"code":"import { StereoEffect } from \"./StereoEffect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Signal } from \"../signal/Signal\";\nimport { LowpassCombFilter } from \"../component/filter/LowpassCombFilter\";\n/**\n * An array of comb filter delay values from Freeverb implementation\n */\nconst combFilterTunings = [1557 / 44100, 1617 / 44100, 1491 / 44100, 1422 / 44100, 1277 / 44100, 1356 / 44100, 1188 / 44100, 1116 / 44100];\n/**\n * An array of allpass filter frequency values from Freeverb implementation\n */\nconst allpassFilterFrequencies = [225, 556, 441, 341];\n/**\n * Freeverb is a reverb based on [Freeverb](https://ccrma.stanford.edu/~jos/pasp/Freeverb.html).\n * Read more on reverb on [Sound On Sound](https://web.archive.org/web/20160404083902/http://www.soundonsound.com:80/sos/feb01/articles/synthsecrets.asp).\n * Freeverb is now implemented with an AudioWorkletNode which may result on performance degradation on some platforms. Consider using [[Reverb]].\n * @example\n * const freeverb = new Tone.Freeverb().toDestination();\n * freeverb.dampening = 1000;\n * // routing synth through the reverb\n * const synth = new Tone.NoiseSynth().connect(freeverb);\n * synth.triggerAttackRelease(0.05);\n * @category Effect\n */\nexport class Freeverb extends StereoEffect {\n  constructor() {\n    super(optionsFromArguments(Freeverb.getDefaults(), arguments, [\"roomSize\", \"dampening\"]));\n    this.name = \"Freeverb\";\n    /**\n     * the comb filters\n     */\n    this._combFilters = [];\n    /**\n     * the allpass filters on the left\n     */\n    this._allpassFiltersL = [];\n    /**\n     * the allpass filters on the right\n     */\n    this._allpassFiltersR = [];\n    const options = optionsFromArguments(Freeverb.getDefaults(), arguments, [\"roomSize\", \"dampening\"]);\n    this.roomSize = new Signal({\n      context: this.context,\n      value: options.roomSize,\n      units: \"normalRange\"\n    });\n    // make the allpass filters on the right\n    this._allpassFiltersL = allpassFilterFrequencies.map(freq => {\n      const allpassL = this.context.createBiquadFilter();\n      allpassL.type = \"allpass\";\n      allpassL.frequency.value = freq;\n      return allpassL;\n    });\n    // make the allpass filters on the left\n    this._allpassFiltersR = allpassFilterFrequencies.map(freq => {\n      const allpassR = this.context.createBiquadFilter();\n      allpassR.type = \"allpass\";\n      allpassR.frequency.value = freq;\n      return allpassR;\n    });\n    // make the comb filters\n    this._combFilters = combFilterTunings.map((delayTime, index) => {\n      const lfpf = new LowpassCombFilter({\n        context: this.context,\n        dampening: options.dampening,\n        delayTime\n      });\n      if (index < combFilterTunings.length / 2) {\n        this.connectEffectLeft(lfpf, ...this._allpassFiltersL);\n      } else {\n        this.connectEffectRight(lfpf, ...this._allpassFiltersR);\n      }\n      this.roomSize.connect(lfpf.resonance);\n      return lfpf;\n    });\n    readOnly(this, [\"roomSize\"]);\n  }\n  static getDefaults() {\n    return Object.assign(StereoEffect.getDefaults(), {\n      roomSize: 0.7,\n      dampening: 3000\n    });\n  }\n  /**\n   * The amount of dampening of the reverberant signal.\n   */\n  get dampening() {\n    return this._combFilters[0].dampening;\n  }\n  set dampening(d) {\n    this._combFilters.forEach(c => c.dampening = d);\n  }\n  dispose() {\n    super.dispose();\n    this._allpassFiltersL.forEach(al => al.disconnect());\n    this._allpassFiltersR.forEach(ar => ar.disconnect());\n    this._combFilters.forEach(cf => cf.dispose());\n    this.roomSize.dispose();\n    return this;\n  }\n}","map":{"version":3,"mappings":"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","names":["StereoEffect","optionsFromArguments","readOnly","Signal","LowpassCombFilter","combFilterTunings","allpassFilterFrequencies","Freeverb","constructor","getDefaults","arguments","options","roomSize","context","value","units","_allpassFiltersL","map","freq","allpassL","createBiquadFilter","type","frequency","_allpassFiltersR","allpassR","_combFilters","delayTime","index","lfpf","dampening","length","connectEffectLeft","connectEffectRight","connect","resonance","Object","assign","d","forEach","c","dispose","al","disconnect","ar","cf"],"sources":["/Users/macbook/Desktop/Music/OwnGuitar/node_modules/tone/Tone/effect/Freeverb.ts"],"sourcesContent":["import { StereoEffect, StereoEffectOptions } from \"./StereoEffect\";\nimport { Frequency, NormalRange } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Signal } from \"../signal/Signal\";\nimport { LowpassCombFilter } from \"../component/filter/LowpassCombFilter\";\n\nexport interface FreeverbOptions extends StereoEffectOptions {\n\tdampening: Frequency;\n\troomSize: NormalRange;\n}\n\n/**\n * An array of comb filter delay values from Freeverb implementation\n */\nconst combFilterTunings = [1557 / 44100, 1617 / 44100, 1491 / 44100, 1422 / 44100, 1277 / 44100, 1356 / 44100, 1188 / 44100, 1116 / 44100];\n\n/**\n * An array of allpass filter frequency values from Freeverb implementation\n */\nconst allpassFilterFrequencies = [225, 556, 441, 341];\n\n/**\n * Freeverb is a reverb based on [Freeverb](https://ccrma.stanford.edu/~jos/pasp/Freeverb.html).\n * Read more on reverb on [Sound On Sound](https://web.archive.org/web/20160404083902/http://www.soundonsound.com:80/sos/feb01/articles/synthsecrets.asp).\n * Freeverb is now implemented with an AudioWorkletNode which may result on performance degradation on some platforms. Consider using [[Reverb]].\n * @example\n * const freeverb = new Tone.Freeverb().toDestination();\n * freeverb.dampening = 1000;\n * // routing synth through the reverb\n * const synth = new Tone.NoiseSynth().connect(freeverb);\n * synth.triggerAttackRelease(0.05);\n * @category Effect\n */\nexport class Freeverb extends StereoEffect<FreeverbOptions> {\n\n\treadonly name: string = \"Freeverb\";\n\n\t/**\n\t * The roomSize value between 0 and 1. A larger roomSize will result in a longer decay.\n\t */\n\treadonly roomSize: Signal<\"normalRange\">;\n\n\t/**\n\t * the comb filters\n\t */\n\tprivate _combFilters: LowpassCombFilter[] = [];\n\n\t/**\n\t * the allpass filters on the left\n\t */\n\tprivate _allpassFiltersL: BiquadFilterNode[] = [];\n\n\t/**\n\t * the allpass filters on the right\n\t */\n\tprivate _allpassFiltersR: BiquadFilterNode[] = [];\n\n\t/**\n\t * @param roomSize Correlated to the decay time.\n\t * @param dampening The cutoff frequency of a lowpass filter as part of the reverb.\n\t */\n\tconstructor(roomSize?: NormalRange, dampening?: Frequency);\n\tconstructor(options?: Partial<FreeverbOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Freeverb.getDefaults(), arguments, [\"roomSize\", \"dampening\"]));\n\t\tconst options = optionsFromArguments(Freeverb.getDefaults(), arguments, [\"roomSize\", \"dampening\"]);\n\n\t\tthis.roomSize = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.roomSize,\n\t\t\tunits: \"normalRange\",\n\t\t});\n\n\t\t// make the allpass filters on the right\n\t\tthis._allpassFiltersL = allpassFilterFrequencies.map(freq => {\n\t\t\tconst allpassL = this.context.createBiquadFilter();\n\t\t\tallpassL.type = \"allpass\";\n\t\t\tallpassL.frequency.value = freq;\n\t\t\treturn allpassL;\n\t\t});\n\n\t\t// make the allpass filters on the left\n\t\tthis._allpassFiltersR = allpassFilterFrequencies.map(freq => {\n\t\t\tconst allpassR = this.context.createBiquadFilter();\n\t\t\tallpassR.type = \"allpass\";\n\t\t\tallpassR.frequency.value = freq;\n\t\t\treturn allpassR;\n\t\t});\n\n\t\t// make the comb filters\n\t\tthis._combFilters = combFilterTunings.map((delayTime, index) => {\n\t\t\tconst lfpf = new LowpassCombFilter({\n\t\t\t\tcontext: this.context,\n\t\t\t\tdampening: options.dampening,\n\t\t\t\tdelayTime,\n\t\t\t});\n\t\t\tif (index < combFilterTunings.length / 2) {\n\t\t\t\tthis.connectEffectLeft(lfpf, ...this._allpassFiltersL);\n\t\t\t} else {\n\t\t\t\tthis.connectEffectRight(lfpf, ...this._allpassFiltersR);\n\t\t\t}\n\t\t\tthis.roomSize.connect(lfpf.resonance);\n\t\t\treturn lfpf;\n\t\t});\n\n\t\treadOnly(this, [\"roomSize\"]);\n\t}\n\n\tstatic getDefaults(): FreeverbOptions {\n\t\treturn Object.assign(StereoEffect.getDefaults(), {\n\t\t\troomSize: 0.7,\n\t\t\tdampening: 3000\n\t\t});\n\t}\n\n\t/**\n\t * The amount of dampening of the reverberant signal.\n\t */\n\n\tget dampening(): Frequency {\n\t\treturn this._combFilters[0].dampening;\n\t}\n\tset dampening(d) {\n\t\tthis._combFilters.forEach(c => c.dampening = d);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._allpassFiltersL.forEach(al => al.disconnect());\n\t\tthis._allpassFiltersR.forEach(ar => ar.disconnect());\n\t\tthis._combFilters.forEach(cf => cf.dispose());\n\t\tthis.roomSize.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}