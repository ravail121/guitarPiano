{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { generateWaveform } from \"./OscillatorInterface\";\n/**\n * FMOscillator implements a frequency modulation synthesis\n * ```\n *                                              +-------------+\n * +---------------+        +-------------+     | Carrier Osc |\n * | Modulator Osc +>-------> GainNode    |     |             +--->Output\n * +---------------+        |             +>----> frequency   |\n *                       +--> gain        |     +-------------+\n *                       |  +-------------+\n * +-----------------+   |\n * | modulationIndex +>--+\n * +-----------------+\n * ```\n *\n * @example\n * return Tone.Offline(() => {\n * \tconst fmOsc = new Tone.FMOscillator({\n * \t\tfrequency: 200,\n * \t\ttype: \"square\",\n * \t\tmodulationType: \"triangle\",\n * \t\tharmonicity: 0.2,\n * \t\tmodulationIndex: 3\n * \t}).toDestination().start();\n * }, 0.1, 1);\n * @category Source\n */\nexport class FMOscillator extends Source {\n  constructor() {\n    super(optionsFromArguments(FMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]));\n    this.name = \"FMOscillator\";\n    /**\n     * the node where the modulation happens\n     */\n    this._modulationNode = new Gain({\n      context: this.context,\n      gain: 0\n    });\n    const options = optionsFromArguments(FMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]);\n    this._carrier = new Oscillator({\n      context: this.context,\n      detune: options.detune,\n      frequency: 0,\n      onstop: () => this.onstop(this),\n      phase: options.phase,\n      type: options.type\n    });\n    this.detune = this._carrier.detune;\n    this.frequency = new Signal({\n      context: this.context,\n      units: \"frequency\",\n      value: options.frequency\n    });\n    this._modulator = new Oscillator({\n      context: this.context,\n      phase: options.phase,\n      type: options.modulationType\n    });\n    this.harmonicity = new Multiply({\n      context: this.context,\n      units: \"positive\",\n      value: options.harmonicity\n    });\n    this.modulationIndex = new Multiply({\n      context: this.context,\n      units: \"positive\",\n      value: options.modulationIndex\n    });\n    // connections\n    this.frequency.connect(this._carrier.frequency);\n    this.frequency.chain(this.harmonicity, this._modulator.frequency);\n    this.frequency.chain(this.modulationIndex, this._modulationNode);\n    this._modulator.connect(this._modulationNode.gain);\n    this._modulationNode.connect(this._carrier.frequency);\n    this._carrier.connect(this.output);\n    this.detune.connect(this._modulator.detune);\n    readOnly(this, [\"modulationIndex\", \"frequency\", \"detune\", \"harmonicity\"]);\n  }\n  static getDefaults() {\n    return Object.assign(Oscillator.getDefaults(), {\n      harmonicity: 1,\n      modulationIndex: 2,\n      modulationType: \"square\"\n    });\n  }\n  /**\n   * start the oscillator\n   */\n  _start(time) {\n    this._modulator.start(time);\n    this._carrier.start(time);\n  }\n  /**\n   * stop the oscillator\n   */\n  _stop(time) {\n    this._modulator.stop(time);\n    this._carrier.stop(time);\n  }\n  _restart(time) {\n    this._modulator.restart(time);\n    this._carrier.restart(time);\n    return this;\n  }\n  get type() {\n    return this._carrier.type;\n  }\n  set type(type) {\n    this._carrier.type = type;\n  }\n  get baseType() {\n    return this._carrier.baseType;\n  }\n  set baseType(baseType) {\n    this._carrier.baseType = baseType;\n  }\n  get partialCount() {\n    return this._carrier.partialCount;\n  }\n  set partialCount(partialCount) {\n    this._carrier.partialCount = partialCount;\n  }\n  /**\n   * The type of the modulator oscillator\n   */\n  get modulationType() {\n    return this._modulator.type;\n  }\n  set modulationType(type) {\n    this._modulator.type = type;\n  }\n  get phase() {\n    return this._carrier.phase;\n  }\n  set phase(phase) {\n    this._carrier.phase = phase;\n    this._modulator.phase = phase;\n  }\n  get partials() {\n    return this._carrier.partials;\n  }\n  set partials(partials) {\n    this._carrier.partials = partials;\n  }\n  asArray() {\n    let length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1024;\n    return __awaiter(this, void 0, void 0, function* () {\n      return generateWaveform(this, length);\n    });\n  }\n  /**\n   * Clean up.\n   */\n  dispose() {\n    super.dispose();\n    this.frequency.dispose();\n    this.harmonicity.dispose();\n    this._carrier.dispose();\n    this._modulator.dispose();\n    this._modulationNode.dispose();\n    this.modulationIndex.dispose();\n    return this;\n  }\n}","map":{"version":3,"mappings":"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","names":["Gain","optionsFromArguments","readOnly","Multiply","Signal","Source","Oscillator","generateWaveform","FMOscillator","constructor","getDefaults","arguments","context","gain","options","_carrier","detune","frequency","onstop","phase","type","units","value","_modulator","modulationType","harmonicity","modulationIndex","connect","chain","_modulationNode","output","Object","assign","_start","time","start","_stop","stop","_restart","restart","baseType","partialCount","partials","asArray","length","dispose"],"sources":["/Users/macbook/Desktop/Music/OwnGuitar/node_modules/tone/Tone/source/oscillator/FMOscillator.ts"],"sourcesContent":["import { Gain } from \"../../core/context/Gain\";\nimport { Degrees, Frequency, Seconds, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport {\n\tFMConstructorOptions, FMOscillatorOptions,\n\tgenerateWaveform, NonCustomOscillatorType, ToneOscillatorInterface, ToneOscillatorType\n} from \"./OscillatorInterface\";\n\nexport { FMOscillatorOptions } from \"./OscillatorInterface\";\n/**\n * FMOscillator implements a frequency modulation synthesis\n * ```\n *                                              +-------------+\n * +---------------+        +-------------+     | Carrier Osc |\n * | Modulator Osc +>-------> GainNode    |     |             +--->Output\n * +---------------+        |             +>----> frequency   |\n *                       +--> gain        |     +-------------+\n *                       |  +-------------+\n * +-----------------+   |\n * | modulationIndex +>--+\n * +-----------------+\n * ```\n *\n * @example\n * return Tone.Offline(() => {\n * \tconst fmOsc = new Tone.FMOscillator({\n * \t\tfrequency: 200,\n * \t\ttype: \"square\",\n * \t\tmodulationType: \"triangle\",\n * \t\tharmonicity: 0.2,\n * \t\tmodulationIndex: 3\n * \t}).toDestination().start();\n * }, 0.1, 1);\n * @category Source\n */\nexport class FMOscillator extends Source<FMOscillatorOptions> implements ToneOscillatorInterface {\n\n\treadonly name: string = \"FMOscillator\";\n\n\t/**\n\t * The carrier oscillator\n\t */\n\tprivate _carrier: Oscillator;\n\n\treadonly frequency: Signal<\"frequency\">;\n\treadonly detune: Signal<\"cents\">;\n\n\t/**\n\t * The modulating oscillator\n\t */\n\tprivate _modulator: Oscillator;\n\n\t/**\n\t * Harmonicity is the frequency ratio between the carrier and the modulator oscillators.\n\t * A harmonicity of 1 gives both oscillators the same frequency.\n\t * Harmonicity = 2 means a change of an octave.\n\t * @example\n\t * const fmOsc = new Tone.FMOscillator(\"D2\").toDestination().start();\n\t * // pitch the modulator an octave below carrier\n\t * fmOsc.harmonicity.value = 0.5;\n\t */\n\treadonly harmonicity: Signal<\"positive\">;\n\n\t/**\n\t * The modulation index which is in essence the depth or amount of the modulation. In other terms it is the\n\t * ratio of the frequency of the modulating signal (mf) to the amplitude of the\n\t * modulating signal (ma) -- as in ma/mf.\n\t */\n\treadonly modulationIndex: Signal<\"positive\">;\n\n\t/**\n\t * the node where the modulation happens\n\t */\n\tprivate _modulationNode: Gain = new Gain({\n\t\tcontext: this.context,\n\t\tgain: 0,\n\t});\n\n\t/**\n\t * @param frequency The starting frequency of the oscillator.\n\t * @param type The type of the carrier oscillator.\n\t * @param modulationType The type of the modulator oscillator.\n\t */\n\tconstructor(frequency?: Frequency, type?: ToneOscillatorType, modulationType?: ToneOscillatorType);\n\tconstructor(options?: Partial<FMConstructorOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(FMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]));\n\t\tconst options = optionsFromArguments(FMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]);\n\n\t\tthis._carrier = new Oscillator({\n\t\t\tcontext: this.context,\n\t\t\tdetune: options.detune,\n\t\t\tfrequency: 0,\n\t\t\tonstop: () => this.onstop(this),\n\t\t\tphase: options.phase,\n\t\t\ttype: options.type,\n\t\t} as OscillatorOptions);\n\n\t\tthis.detune = this._carrier.detune;\n\n\t\tthis.frequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.frequency,\n\t\t});\n\n\t\tthis._modulator = new Oscillator({\n\t\t\tcontext: this.context,\n\t\t\tphase: options.phase,\n\t\t\ttype: options.modulationType,\n\t\t} as OscillatorOptions);\n\n\t\tthis.harmonicity = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"positive\",\n\t\t\tvalue: options.harmonicity,\n\t\t});\n\n\t\tthis.modulationIndex = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"positive\",\n\t\t\tvalue: options.modulationIndex,\n\t\t});\n\n\t\t// connections\n\t\tthis.frequency.connect(this._carrier.frequency);\n\t\tthis.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t\tthis.frequency.chain(this.modulationIndex, this._modulationNode);\n\t\tthis._modulator.connect(this._modulationNode.gain);\n\t\tthis._modulationNode.connect(this._carrier.frequency);\n\t\tthis._carrier.connect(this.output);\n\t\tthis.detune.connect(this._modulator.detune);\n\n\t\treadOnly(this, [\"modulationIndex\", \"frequency\", \"detune\", \"harmonicity\"]);\n\t}\n\n\tstatic getDefaults(): FMOscillatorOptions {\n\t\treturn Object.assign(Oscillator.getDefaults(), {\n\t\t\tharmonicity: 1,\n\t\t\tmodulationIndex: 2,\n\t\t\tmodulationType: \"square\" as NonCustomOscillatorType,\n\t\t});\n\t}\n\n\t/**\n\t * start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\tthis._modulator.start(time);\n\t\tthis._carrier.start(time);\n\t}\n\n\t/**\n\t * stop the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\tthis._modulator.stop(time);\n\t\tthis._carrier.stop(time);\n\t}\n\n\tprotected _restart(time: Seconds): this {\n\t\tthis._modulator.restart(time);\n\t\tthis._carrier.restart(time);\n\t\treturn this;\n\t}\n\n\tget type(): ToneOscillatorType {\n\t\treturn this._carrier.type;\n\t}\n\tset type(type: ToneOscillatorType) {\n\t\tthis._carrier.type = type;\n\t}\n\n\tget baseType(): OscillatorType {\n\t\treturn this._carrier.baseType;\n\t}\n\tset baseType(baseType: OscillatorType) {\n\t\tthis._carrier.baseType = baseType;\n\t}\n\n\tget partialCount(): number {\n\t\treturn this._carrier.partialCount;\n\t}\n\tset partialCount(partialCount: number) {\n\t\tthis._carrier.partialCount = partialCount;\n\t}\n\n\t/**\n\t * The type of the modulator oscillator\n\t */\n\tget modulationType(): ToneOscillatorType {\n\t\treturn this._modulator.type;\n\t}\n\tset modulationType(type: ToneOscillatorType) {\n\t\tthis._modulator.type = type;\n\t}\n\n\tget phase(): Degrees {\n\t\treturn this._carrier.phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._carrier.phase = phase;\n\t\tthis._modulator.phase = phase;\n\t}\n\n\tget partials(): number[] {\n\t\treturn this._carrier.partials;\n\t}\n\tset partials(partials: number[]) {\n\t\tthis._carrier.partials = partials;\n\t}\n\n\tasync asArray(length = 1024): Promise<Float32Array> {\n\t\treturn generateWaveform(this, length);\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.harmonicity.dispose();\n\t\tthis._carrier.dispose();\n\t\tthis._modulator.dispose();\n\t\tthis._modulationNode.dispose();\n\t\tthis.modulationIndex.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}