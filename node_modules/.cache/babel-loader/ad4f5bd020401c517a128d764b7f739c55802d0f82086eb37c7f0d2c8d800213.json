{"ast":null,"code":"import { Envelope } from \"../component/envelope/Envelope\";\nimport { Filter } from \"../component/filter/Filter\";\nimport { Gain } from \"../core/context/Gain\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { deepMerge, omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { Scale } from \"../signal/Scale\";\nimport { Signal } from \"../signal/Signal\";\nimport { FMOscillator } from \"../source/oscillator/FMOscillator\";\nimport { Monophonic } from \"./Monophonic\";\n/**\n * Inharmonic ratio of frequencies based on the Roland TR-808\n * Taken from https://ccrma.stanford.edu/papers/tr-808-cymbal-physically-informed-circuit-bendable-digital-model\n */\nconst inharmRatios = [1.0, 1.483, 1.932, 2.546, 2.630, 3.897];\n/**\n * A highly inharmonic and spectrally complex source with a highpass filter\n * and amplitude envelope which is good for making metallophone sounds.\n * Based on CymbalSynth by [@polyrhythmatic](https://github.com/polyrhythmatic).\n * Inspiration from [Sound on Sound](https://shorturl.at/rSZ12).\n * @category Instrument\n */\nexport class MetalSynth extends Monophonic {\n  constructor() {\n    super(optionsFromArguments(MetalSynth.getDefaults(), arguments));\n    this.name = \"MetalSynth\";\n    /**\n     * The array of FMOscillators\n     */\n    this._oscillators = [];\n    /**\n     * The frequency multipliers\n     */\n    this._freqMultipliers = [];\n    const options = optionsFromArguments(MetalSynth.getDefaults(), arguments);\n    this.detune = new Signal({\n      context: this.context,\n      units: \"cents\",\n      value: options.detune\n    });\n    this.frequency = new Signal({\n      context: this.context,\n      units: \"frequency\"\n    });\n    this._amplitude = new Gain({\n      context: this.context,\n      gain: 0\n    }).connect(this.output);\n    this._highpass = new Filter({\n      // Q: -3.0102999566398125,\n      Q: 0,\n      context: this.context,\n      type: \"highpass\"\n    }).connect(this._amplitude);\n    for (let i = 0; i < inharmRatios.length; i++) {\n      const osc = new FMOscillator({\n        context: this.context,\n        harmonicity: options.harmonicity,\n        modulationIndex: options.modulationIndex,\n        modulationType: \"square\",\n        onstop: i === 0 ? () => this.onsilence(this) : noOp,\n        type: \"square\"\n      });\n      osc.connect(this._highpass);\n      this._oscillators[i] = osc;\n      const mult = new Multiply({\n        context: this.context,\n        value: inharmRatios[i]\n      });\n      this._freqMultipliers[i] = mult;\n      this.frequency.chain(mult, osc.frequency);\n      this.detune.connect(osc.detune);\n    }\n    this._filterFreqScaler = new Scale({\n      context: this.context,\n      max: 7000,\n      min: this.toFrequency(options.resonance)\n    });\n    this.envelope = new Envelope({\n      attack: options.envelope.attack,\n      attackCurve: \"linear\",\n      context: this.context,\n      decay: options.envelope.decay,\n      release: options.envelope.release,\n      sustain: 0\n    });\n    this.envelope.chain(this._filterFreqScaler, this._highpass.frequency);\n    this.envelope.connect(this._amplitude.gain);\n    // set the octaves\n    this._octaves = options.octaves;\n    this.octaves = options.octaves;\n  }\n  static getDefaults() {\n    return deepMerge(Monophonic.getDefaults(), {\n      envelope: Object.assign(omitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())), {\n        attack: 0.001,\n        decay: 1.4,\n        release: 0.2\n      }),\n      harmonicity: 5.1,\n      modulationIndex: 32,\n      octaves: 1.5,\n      resonance: 4000\n    });\n  }\n  /**\n   * Trigger the attack.\n   * @param time When the attack should be triggered.\n   * @param velocity The velocity that the envelope should be triggered at.\n   */\n  _triggerEnvelopeAttack(time) {\n    let velocity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    this.envelope.triggerAttack(time, velocity);\n    this._oscillators.forEach(osc => osc.start(time));\n    if (this.envelope.sustain === 0) {\n      this._oscillators.forEach(osc => {\n        osc.stop(time + this.toSeconds(this.envelope.attack) + this.toSeconds(this.envelope.decay));\n      });\n    }\n    return this;\n  }\n  /**\n   * Trigger the release of the envelope.\n   * @param time When the release should be triggered.\n   */\n  _triggerEnvelopeRelease(time) {\n    this.envelope.triggerRelease(time);\n    this._oscillators.forEach(osc => osc.stop(time + this.toSeconds(this.envelope.release)));\n    return this;\n  }\n  getLevelAtTime(time) {\n    time = this.toSeconds(time);\n    return this.envelope.getValueAtTime(time);\n  }\n  /**\n   * The modulationIndex of the oscillators which make up the source.\n   * see [[FMOscillator.modulationIndex]]\n   * @min 1\n   * @max 100\n   */\n  get modulationIndex() {\n    return this._oscillators[0].modulationIndex.value;\n  }\n  set modulationIndex(val) {\n    this._oscillators.forEach(osc => osc.modulationIndex.value = val);\n  }\n  /**\n   * The harmonicity of the oscillators which make up the source.\n   * see Tone.FMOscillator.harmonicity\n   * @min 0.1\n   * @max 10\n   */\n  get harmonicity() {\n    return this._oscillators[0].harmonicity.value;\n  }\n  set harmonicity(val) {\n    this._oscillators.forEach(osc => osc.harmonicity.value = val);\n  }\n  /**\n   * The lower level of the highpass filter which is attached to the envelope.\n   * This value should be between [0, 7000]\n   * @min 0\n   * @max 7000\n   */\n  get resonance() {\n    return this._filterFreqScaler.min;\n  }\n  set resonance(val) {\n    this._filterFreqScaler.min = this.toFrequency(val);\n    this.octaves = this._octaves;\n  }\n  /**\n   * The number of octaves above the \"resonance\" frequency\n   * that the filter ramps during the attack/decay envelope\n   * @min 0\n   * @max 8\n   */\n  get octaves() {\n    return this._octaves;\n  }\n  set octaves(val) {\n    this._octaves = val;\n    this._filterFreqScaler.max = this._filterFreqScaler.min * Math.pow(2, val);\n  }\n  dispose() {\n    super.dispose();\n    this._oscillators.forEach(osc => osc.dispose());\n    this._freqMultipliers.forEach(freqMult => freqMult.dispose());\n    this.frequency.dispose();\n    this.detune.dispose();\n    this._filterFreqScaler.dispose();\n    this._amplitude.dispose();\n    this.envelope.dispose();\n    this._highpass.dispose();\n    return this;\n  }\n}","map":{"version":3,"mappings":"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","names":["Envelope","Filter","Gain","ToneAudioNode","deepMerge","omitFromObject","optionsFromArguments","noOp","Multiply","Scale","Signal","FMOscillator","Monophonic","inharmRatios","MetalSynth","constructor","getDefaults","arguments","options","detune","context","units","value","frequency","_amplitude","gain","connect","output","_highpass","Q","type","i","length","osc","harmonicity","modulationIndex","modulationType","onstop","onsilence","_oscillators","mult","_freqMultipliers","chain","_filterFreqScaler","max","min","toFrequency","resonance","envelope","attack","attackCurve","decay","release","sustain","_octaves","octaves","Object","assign","keys","_triggerEnvelopeAttack","time","velocity","triggerAttack","forEach","start","stop","toSeconds","_triggerEnvelopeRelease","triggerRelease","getLevelAtTime","getValueAtTime","val","Math","pow","dispose","freqMult"],"sources":["/Users/macbook/Desktop/Music/OwnGuitar/node_modules/tone/Tone/instrument/MetalSynth.ts"],"sourcesContent":["import { Envelope, EnvelopeOptions } from \"../component/envelope/Envelope\";\nimport { Filter } from \"../component/filter/Filter\";\nimport { Gain } from \"../core/context/Gain\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { Frequency, NormalRange, Positive, Seconds, Time } from \"../core/type/Units\";\nimport { deepMerge, omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp, RecursivePartial } from \"../core/util/Interface\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { Scale } from \"../signal/Scale\";\nimport { Signal } from \"../signal/Signal\";\nimport { FMOscillator } from \"../source/oscillator/FMOscillator\";\nimport { Monophonic, MonophonicOptions } from \"./Monophonic\";\n\nexport interface MetalSynthOptions extends MonophonicOptions {\n\tharmonicity: Positive;\n\tmodulationIndex: Positive;\n\toctaves: number;\n\tresonance: Frequency;\n\tenvelope: Omit<EnvelopeOptions, keyof ToneAudioNodeOptions>;\n}\n\n/**\n * Inharmonic ratio of frequencies based on the Roland TR-808\n * Taken from https://ccrma.stanford.edu/papers/tr-808-cymbal-physically-informed-circuit-bendable-digital-model\n */\nconst inharmRatios: number[] = [1.0, 1.483, 1.932, 2.546, 2.630, 3.897];\n\n/**\n * A highly inharmonic and spectrally complex source with a highpass filter\n * and amplitude envelope which is good for making metallophone sounds.\n * Based on CymbalSynth by [@polyrhythmatic](https://github.com/polyrhythmatic).\n * Inspiration from [Sound on Sound](https://shorturl.at/rSZ12).\n * @category Instrument\n */\nexport class MetalSynth extends Monophonic<MetalSynthOptions> {\n\n\treadonly name: string = \"MetalSynth\";\n\n\t/**\n\t * The frequency of the cymbal\n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\n\t/**\n\t * The detune applied to the oscillators\n\t */\n\treadonly detune: Signal<\"cents\">;\n\n\t/**\n\t * The array of FMOscillators\n\t */\n\tprivate _oscillators: FMOscillator[] = [];\n\n\t/**\n\t * The frequency multipliers\n\t */\n\tprivate _freqMultipliers: Multiply[] = [];\n\n\t/**\n\t * The gain node for the envelope.\n\t */\n\tprivate _amplitude: Gain;\n\n\t/**\n\t * Highpass the output\n\t */\n\tprivate _highpass: Filter;\n\n\t/**\n\t * The number of octaves the highpass\n\t * filter frequency ramps\n\t */\n\tprivate _octaves: number;\n\n\t/**\n\t * Scale the body envelope for the highpass filter\n\t */\n\tprivate _filterFreqScaler: Scale;\n\n\t/**\n\t * The envelope which is connected both to the\n\t * amplitude and a highpass filter's cutoff frequency.\n\t * The lower-limit of the filter is controlled by the [[resonance]]\n\t */\n\treadonly envelope: Envelope;\n\n\tconstructor(options?: RecursivePartial<MetalSynthOptions>)\n\tconstructor() {\n\t\tsuper(optionsFromArguments(MetalSynth.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(MetalSynth.getDefaults(), arguments);\n\n\t\tthis.detune = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"cents\",\n\t\t\tvalue: options.detune,\n\t\t});\n\n\t\tthis.frequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t});\n\n\t\tthis._amplitude = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: 0,\n\t\t}).connect(this.output);\n\n\t\tthis._highpass = new Filter({\n\t\t\t// Q: -3.0102999566398125,\n\t\t\tQ: 0,\n\t\t\tcontext: this.context,\n\t\t\ttype: \"highpass\",\n\t\t}).connect(this._amplitude);\n\n\t\tfor (let i = 0; i < inharmRatios.length; i++) {\n\t\t\tconst osc = new FMOscillator({\n\t\t\t\tcontext: this.context,\n\t\t\t\tharmonicity: options.harmonicity,\n\t\t\t\tmodulationIndex: options.modulationIndex,\n\t\t\t\tmodulationType: \"square\",\n\t\t\t\tonstop: i === 0 ? () => this.onsilence(this) : noOp,\n\t\t\t\ttype: \"square\",\n\t\t\t});\n\t\t\tosc.connect(this._highpass);\n\t\t\tthis._oscillators[i] = osc;\n\n\t\t\tconst mult = new Multiply({\n\t\t\t\tcontext: this.context,\n\t\t\t\tvalue: inharmRatios[i],\n\t\t\t});\n\t\t\tthis._freqMultipliers[i] = mult;\n\t\t\tthis.frequency.chain(mult, osc.frequency);\n\t\t\tthis.detune.connect(osc.detune);\n\t\t}\n\n\t\tthis._filterFreqScaler = new Scale({\n\t\t\tcontext: this.context,\n\t\t\tmax: 7000,\n\t\t\tmin: this.toFrequency(options.resonance),\n\t\t});\n\n\t\tthis.envelope = new Envelope({\n\t\t\tattack: options.envelope.attack,\n\t\t\tattackCurve: \"linear\",\n\t\t\tcontext: this.context,\n\t\t\tdecay: options.envelope.decay,\n\t\t\trelease: options.envelope.release,\n\t\t\tsustain: 0,\n\t\t});\n\n\t\tthis.envelope.chain(this._filterFreqScaler, this._highpass.frequency);\n\t\tthis.envelope.connect(this._amplitude.gain);\n\t\t// set the octaves\n\t\tthis._octaves = options.octaves;\n\t\tthis.octaves = options.octaves;\n\t}\n\n\tstatic getDefaults(): MetalSynthOptions {\n\t\treturn deepMerge(Monophonic.getDefaults(), {\n\t\t\tenvelope: Object.assign(\n\t\t\t\tomitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())),\n\t\t\t\t{\n\t\t\t\t\tattack: 0.001,\n\t\t\t\t\tdecay: 1.4,\n\t\t\t\t\trelease: 0.2,\n\t\t\t\t},\n\t\t\t),\n\t\t\tharmonicity: 5.1,\n\t\t\tmodulationIndex: 32,\n\t\t\toctaves: 1.5,\n\t\t\tresonance: 4000,\n\t\t});\n\t}\n\n\t/**\n\t * Trigger the attack.\n\t * @param time When the attack should be triggered.\n\t * @param velocity The velocity that the envelope should be triggered at.\n\t */\n\tprotected _triggerEnvelopeAttack(time: Seconds, velocity: NormalRange = 1): this {\n\t\tthis.envelope.triggerAttack(time, velocity);\n\t\tthis._oscillators.forEach(osc => osc.start(time));\n\t\tif (this.envelope.sustain === 0) {\n\t\t\tthis._oscillators.forEach(osc => {\n\t\t\t\tosc.stop(time + this.toSeconds(this.envelope.attack) + this.toSeconds(this.envelope.decay));\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\t\n\t/**\n\t * Trigger the release of the envelope.\n\t * @param time When the release should be triggered.\n\t */\n\tprotected _triggerEnvelopeRelease(time: Seconds): this {\n\t\tthis.envelope.triggerRelease(time);\n\t\tthis._oscillators.forEach(osc => osc.stop(time + this.toSeconds(this.envelope.release)));\n\t\treturn this;\n\t}\n\n\tgetLevelAtTime(time: Time): NormalRange {\n\t\ttime = this.toSeconds(time);\n\t\treturn this.envelope.getValueAtTime(time);\n\t}\n\n\t/**\n\t * The modulationIndex of the oscillators which make up the source.\n\t * see [[FMOscillator.modulationIndex]]\n\t * @min 1\n\t * @max 100\n\t */\n\tget modulationIndex(): number {\n\t\treturn this._oscillators[0].modulationIndex.value;\n\t}\n\tset modulationIndex(val) {\n\t\tthis._oscillators.forEach(osc => (osc.modulationIndex.value = val));\n\t}\n\n\t/**\n\t * The harmonicity of the oscillators which make up the source.\n\t * see Tone.FMOscillator.harmonicity\n\t * @min 0.1\n\t * @max 10\n\t */\n\tget harmonicity(): number {\n\t\treturn this._oscillators[0].harmonicity.value;\n\t}\n\tset harmonicity(val) {\n\t\tthis._oscillators.forEach(osc => (osc.harmonicity.value = val));\n\t}\n\n\t/**\n\t * The lower level of the highpass filter which is attached to the envelope.\n\t * This value should be between [0, 7000]\n\t * @min 0\n\t * @max 7000\n\t */\n\tget resonance(): Frequency {\n\t\treturn this._filterFreqScaler.min;\n\t}\n\tset resonance(val) {\n\t\tthis._filterFreqScaler.min = this.toFrequency(val);\n\t\tthis.octaves = this._octaves;\n\t}\n\n\t/**\n\t * The number of octaves above the \"resonance\" frequency\n\t * that the filter ramps during the attack/decay envelope\n\t * @min 0\n\t * @max 8\n\t */\n\tget octaves(): number {\n\t\treturn this._octaves;\n\t}\n\tset octaves(val) {\n\t\tthis._octaves = val;\n\t\tthis._filterFreqScaler.max = this._filterFreqScaler.min * Math.pow(2, val);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._oscillators.forEach(osc => osc.dispose());\n\t\tthis._freqMultipliers.forEach(freqMult => freqMult.dispose());\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\tthis._filterFreqScaler.dispose();\n\t\tthis._amplitude.dispose();\n\t\tthis.envelope.dispose();\n\t\tthis._highpass.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}