{"ast":null,"code":"import { Tone } from \"../Tone\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { noOp } from \"../util/Interface\";\nimport { isString } from \"../util/TypeCheck\";\nimport { ToneAudioBuffer } from \"./ToneAudioBuffer\";\nimport { assert } from \"../util/Debug\";\n/**\n * A data structure for holding multiple buffers in a Map-like datastructure.\n *\n * @example\n * const pianoSamples = new Tone.ToneAudioBuffers({\n * \tA1: \"https://tonejs.github.io/audio/casio/A1.mp3\",\n * \tA2: \"https://tonejs.github.io/audio/casio/A2.mp3\",\n * }, () => {\n * \tconst player = new Tone.Player().toDestination();\n * \t// play one of the samples when they all load\n * \tplayer.buffer = pianoSamples.get(\"A2\");\n * \tplayer.start();\n * });\n * @example\n * // To pass in additional parameters in the second parameter\n * const buffers = new Tone.ToneAudioBuffers({\n * \t urls: {\n * \t\t A1: \"A1.mp3\",\n * \t\t A2: \"A2.mp3\",\n * \t },\n * \t onload: () => console.log(\"loaded\"),\n * \t baseUrl: \"https://tonejs.github.io/audio/casio/\"\n * });\n * @category Core\n */\nexport class ToneAudioBuffers extends Tone {\n  constructor() {\n    super();\n    this.name = \"ToneAudioBuffers\";\n    /**\n     * All of the buffers\n     */\n    this._buffers = new Map();\n    /**\n     * Keep track of the number of loaded buffers\n     */\n    this._loadingCount = 0;\n    const options = optionsFromArguments(ToneAudioBuffers.getDefaults(), arguments, [\"urls\", \"onload\", \"baseUrl\"], \"urls\");\n    this.baseUrl = options.baseUrl;\n    // add each one\n    Object.keys(options.urls).forEach(name => {\n      this._loadingCount++;\n      const url = options.urls[name];\n      this.add(name, url, this._bufferLoaded.bind(this, options.onload), options.onerror);\n    });\n  }\n  static getDefaults() {\n    return {\n      baseUrl: \"\",\n      onerror: noOp,\n      onload: noOp,\n      urls: {}\n    };\n  }\n  /**\n   * True if the buffers object has a buffer by that name.\n   * @param  name  The key or index of the buffer.\n   */\n  has(name) {\n    return this._buffers.has(name.toString());\n  }\n  /**\n   * Get a buffer by name. If an array was loaded,\n   * then use the array index.\n   * @param  name  The key or index of the buffer.\n   */\n  get(name) {\n    assert(this.has(name), `ToneAudioBuffers has no buffer named: ${name}`);\n    return this._buffers.get(name.toString());\n  }\n  /**\n   * A buffer was loaded. decrement the counter.\n   */\n  _bufferLoaded(callback) {\n    this._loadingCount--;\n    if (this._loadingCount === 0 && callback) {\n      callback();\n    }\n  }\n  /**\n   * If the buffers are loaded or not\n   */\n  get loaded() {\n    return Array.from(this._buffers).every(_ref => {\n      let [_, buffer] = _ref;\n      return buffer.loaded;\n    });\n  }\n  /**\n   * Add a buffer by name and url to the Buffers\n   * @param  name      A unique name to give the buffer\n   * @param  url  Either the url of the bufer, or a buffer which will be added with the given name.\n   * @param  callback  The callback to invoke when the url is loaded.\n   * @param  onerror  Invoked if the buffer can't be loaded\n   */\n  add(name, url) {\n    let callback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : noOp;\n    let onerror = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : noOp;\n    if (isString(url)) {\n      this._buffers.set(name.toString(), new ToneAudioBuffer(this.baseUrl + url, callback, onerror));\n    } else {\n      this._buffers.set(name.toString(), new ToneAudioBuffer(url, callback, onerror));\n    }\n    return this;\n  }\n  dispose() {\n    super.dispose();\n    this._buffers.forEach(buffer => buffer.dispose());\n    this._buffers.clear();\n    return this;\n  }\n}","map":{"version":3,"mappings":"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","names":["Tone","optionsFromArguments","noOp","isString","ToneAudioBuffer","assert","ToneAudioBuffers","constructor","Map","options","getDefaults","arguments","baseUrl","Object","keys","urls","forEach","name","_loadingCount","url","add","_bufferLoaded","bind","onload","onerror","has","_buffers","toString","get","callback","loaded","Array","from","every","_","buffer","set","dispose","clear"],"sources":["/Users/macbook/Desktop/Music/OwnGuitar/node_modules/tone/Tone/core/context/ToneAudioBuffers.ts"],"sourcesContent":["import { Tone } from \"../Tone\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { noOp } from \"../util/Interface\";\nimport { isString } from \"../util/TypeCheck\";\nimport { ToneAudioBuffer } from \"./ToneAudioBuffer\";\nimport { assert } from \"../util/Debug\";\n\nexport interface ToneAudioBuffersUrlMap {\n\t[name: string]: string | AudioBuffer | ToneAudioBuffer;\n\t[name: number]: string | AudioBuffer | ToneAudioBuffer;\n}\n\ninterface ToneAudioBuffersOptions {\n\turls: ToneAudioBuffersUrlMap;\n\tonload: () => void;\n\tonerror?: (error: Error) => void;\n\tbaseUrl: string;\n}\n\n/**\n * A data structure for holding multiple buffers in a Map-like datastructure.\n *\n * @example\n * const pianoSamples = new Tone.ToneAudioBuffers({\n * \tA1: \"https://tonejs.github.io/audio/casio/A1.mp3\",\n * \tA2: \"https://tonejs.github.io/audio/casio/A2.mp3\",\n * }, () => {\n * \tconst player = new Tone.Player().toDestination();\n * \t// play one of the samples when they all load\n * \tplayer.buffer = pianoSamples.get(\"A2\");\n * \tplayer.start();\n * });\n * @example\n * // To pass in additional parameters in the second parameter\n * const buffers = new Tone.ToneAudioBuffers({\n * \t urls: {\n * \t\t A1: \"A1.mp3\",\n * \t\t A2: \"A2.mp3\",\n * \t },\n * \t onload: () => console.log(\"loaded\"),\n * \t baseUrl: \"https://tonejs.github.io/audio/casio/\"\n * });\n * @category Core\n */\nexport class ToneAudioBuffers extends Tone {\n\n\treadonly name: string = \"ToneAudioBuffers\";\n\n\t/**\n\t * All of the buffers\n\t */\n\tprivate _buffers: Map<string, ToneAudioBuffer> = new Map();\n\n\t/**\n\t * A path which is prefixed before every url.\n\t */\n\tbaseUrl: string;\n\n\t/**\n\t * Keep track of the number of loaded buffers\n\t */\n\tprivate _loadingCount = 0;\n\n\t/**\n\t * @param  urls  An object literal or array of urls to load.\n\t * @param onload  The callback to invoke when the buffers are loaded.\n\t * @param baseUrl A prefix url to add before all the urls\n\t */\n\tconstructor(\n\t\turls?: ToneAudioBuffersUrlMap,\n\t\tonload?: () => void,\n\t\tbaseUrl?: string,\n\t);\n\tconstructor(options?: Partial<ToneAudioBuffersOptions>);\n\tconstructor() {\n\n\t\tsuper();\n\t\tconst options = optionsFromArguments(\n\t\t\tToneAudioBuffers.getDefaults(), arguments, [\"urls\", \"onload\", \"baseUrl\"], \"urls\",\n\t\t);\n\n\t\tthis.baseUrl = options.baseUrl;\n\t\t// add each one\n\t\tObject.keys(options.urls).forEach(name => {\n\t\t\tthis._loadingCount++;\n\t\t\tconst url = options.urls[name];\n\t\t\tthis.add(name, url, this._bufferLoaded.bind(this, options.onload), options.onerror);\n\t\t});\n\n\t}\n\n\tstatic getDefaults(): ToneAudioBuffersOptions {\n\t\treturn {\n\t\t\tbaseUrl: \"\",\n\t\t\tonerror: noOp,\n\t\t\tonload: noOp,\n\t\t\turls: {},\n\t\t};\n\t}\n\n\t/**\n\t * True if the buffers object has a buffer by that name.\n\t * @param  name  The key or index of the buffer.\n\t */\n\thas(name: string | number): boolean {\n\t\treturn this._buffers.has(name.toString());\n\t}\n\n\t/**\n\t * Get a buffer by name. If an array was loaded,\n\t * then use the array index.\n\t * @param  name  The key or index of the buffer.\n\t */\n\tget(name: string | number): ToneAudioBuffer {\n\t\tassert(this.has(name), `ToneAudioBuffers has no buffer named: ${name}`);\n\t\treturn this._buffers.get(name.toString()) as ToneAudioBuffer;\n\t}\n\n\t/**\n\t * A buffer was loaded. decrement the counter.\n\t */\n\tprivate _bufferLoaded(callback: () => void): void {\n\t\tthis._loadingCount--;\n\t\tif (this._loadingCount === 0 && callback) {\n\t\t\tcallback();\n\t\t}\n\t}\n\n\t/**\n\t * If the buffers are loaded or not\n\t */\n\tget loaded(): boolean {\n\t\treturn Array.from(this._buffers).every(([_, buffer]) => buffer.loaded);\n\t}\n\n\t/**\n\t * Add a buffer by name and url to the Buffers\n\t * @param  name      A unique name to give the buffer\n\t * @param  url  Either the url of the bufer, or a buffer which will be added with the given name.\n\t * @param  callback  The callback to invoke when the url is loaded.\n\t * @param  onerror  Invoked if the buffer can't be loaded\n\t */\n\tadd(\n\t\tname: string | number,\n\t\turl: string | AudioBuffer | ToneAudioBuffer,\n\t\tcallback: () => void = noOp,\n\t\tonerror: (e: Error) => void = noOp,\n\t): this {\n\t\tif (isString(url)) {\n\t\t\tthis._buffers.set(name.toString(), new ToneAudioBuffer(this.baseUrl + url, callback, onerror));\n\t\t} else {\n\t\t\tthis._buffers.set(name.toString(), new ToneAudioBuffer(url, callback, onerror));\n\t\t}\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._buffers.forEach(buffer => buffer.dispose());\n\t\tthis._buffers.clear();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}