{"ast":null,"code":"'use strict';\n\nvar REGEX = /^([a-gA-G])(#{1,}|b{1,}|x{1,}|)(-?\\d*)\\s*(.*)\\s*$/;\n/**\n * A regex for matching note strings in scientific notation.\n *\n * @name regex\n * @function\n * @return {RegExp} the regexp used to parse the note name\n *\n * The note string should have the form `letter[accidentals][octave][element]`\n * where:\n *\n * - letter: (Required) is a letter from A to G either upper or lower case\n * - accidentals: (Optional) can be one or more `b` (flats), `#` (sharps) or `x` (double sharps).\n * They can NOT be mixed.\n * - octave: (Optional) a positive or negative integer\n * - element: (Optional) additionally anything after the duration is considered to\n * be the element name (for example: 'C2 dorian')\n *\n * The executed regex contains (by array index):\n *\n * - 0: the complete string\n * - 1: the note letter\n * - 2: the optional accidentals\n * - 3: the optional octave\n * - 4: the rest of the string (trimmed)\n *\n * @example\n * var parser = require('note-parser')\n * parser.regex.exec('c#4')\n * // => ['c#4', 'c', '#', '4', '']\n * parser.regex.exec('c#4 major')\n * // => ['c#4major', 'c', '#', '4', 'major']\n * parser.regex().exec('CMaj7')\n * // => ['CMaj7', 'C', '', '', 'Maj7']\n */\nfunction regex() {\n  return REGEX;\n}\nvar SEMITONES = [0, 2, 4, 5, 7, 9, 11];\n/**\n * Parse a note name in scientific notation an return it's components,\n * and some numeric properties including midi number and frequency.\n *\n * @name parse\n * @function\n * @param {String} note - the note string to be parsed\n * @param {Boolean} isTonic - true if the note is the tonic of something.\n * If true, en extra tonicOf property is returned. It's false by default.\n * @param {Float} tunning - The frequency of A4 note to calculate frequencies.\n * By default it 440.\n * @return {Object} the parsed note name or null if not a valid note\n *\n * The parsed note name object will ALWAYS contains:\n * - letter: the uppercase letter of the note\n * - acc: the accidentals of the note (only sharps or flats)\n * - pc: the pitch class (letter + acc)\n * - step: s a numeric representation of the letter. It's an integer from 0 to 6\n * where 0 = C, 1 = D ... 6 = B\n * - alt: a numeric representation of the accidentals. 0 means no alteration,\n * positive numbers are for sharps and negative for flats\n * - chroma: a numeric representation of the pitch class. It's like midi for\n * pitch classes. 0 = C, 1 = C#, 2 = D ... It can have negative values: -1 = Cb.\n * Can detect pitch class enhramonics.\n *\n * If the note has octave, the parser object will contain:\n * - oct: the octave number (as integer)\n * - midi: the midi number\n * - freq: the frequency (using tuning parameter as base)\n *\n * If the parameter `isTonic` is set to true, the parsed object will contain:\n * - tonicOf: the rest of the string that follows note name (left and right trimmed)\n *\n * @example\n * var parse = require('note-parser').parse\n * parse('Cb4')\n * // => { letter: 'C', acc: 'b', pc: 'Cb', step: 0, alt: -1, chroma: -1,\n *         oct: 4, midi: 59, freq: 246.94165062806206 }\n * // if no octave, no midi, no freq\n * parse('fx')\n * // => { letter: 'F', acc: '##', pc: 'F##', step: 3, alt: 2, chroma: 7 })\n */\nfunction parse(str, isTonic, tuning) {\n  if (typeof str !== 'string') return null;\n  var m = REGEX.exec(str);\n  if (!m || !isTonic && m[4]) return null;\n  var p = {\n    letter: m[1].toUpperCase(),\n    acc: m[2].replace(/x/g, '##')\n  };\n  p.pc = p.letter + p.acc;\n  p.step = (p.letter.charCodeAt(0) + 3) % 7;\n  p.alt = p.acc[0] === 'b' ? -p.acc.length : p.acc.length;\n  p.chroma = SEMITONES[p.step] + p.alt;\n  if (m[3]) {\n    p.oct = +m[3];\n    p.midi = p.chroma + 12 * (p.oct + 1);\n    p.freq = midiToFreq(p.midi, tuning);\n  }\n  if (isTonic) p.tonicOf = m[4];\n  return p;\n}\n\n/**\n * Given a midi number, return its frequency\n * @param {Integer} midi - midi note number\n * @param {Float} tuning - (Optional) the A4 tuning (440Hz by default)\n * @return {Float} frequency in hertzs\n */\nfunction midiToFreq(midi, tuning) {\n  return Math.pow(2, (midi - 69) / 12) * (tuning || 440);\n}\nvar parser = {\n  parse: parse,\n  regex: regex,\n  midiToFreq: midiToFreq\n};\nvar FNS = ['letter', 'acc', 'pc', 'step', 'alt', 'chroma', 'oct', 'midi', 'freq'];\nFNS.forEach(function (name) {\n  parser[name] = function (src) {\n    var p = parse(src);\n    return p && typeof p[name] !== 'undefined' ? p[name] : null;\n  };\n});\nmodule.exports = parser;\n\n// extra API docs\n/**\n * Get midi of a note\n *\n * @name midi\n * @function\n * @param {String} note - the note name\n * @return {Integer} the midi number of the note or null if not a valid note\n * or the note does NOT contains octave\n * @example\n * var parser = require('note-parser')\n * parser.midi('A4') // => 69\n * parser.midi('A') // => null\n */\n/**\n * Get freq of a note in hertzs (in a well tempered 440Hz A4)\n *\n * @name freq\n * @function\n * @param {String} note - the note name\n * @return {Float} the freq of the number if hertzs or null if not valid note\n * or the note does NOT contains octave\n * @example\n * var parser = require('note-parser')\n * parser.freq('A4') // => 440\n * parser.freq('A') // => null\n */","map":{"version":3,"names":["REGEX","regex","SEMITONES","parse","str","isTonic","tuning","m","exec","p","letter","toUpperCase","acc","replace","pc","step","charCodeAt","alt","length","chroma","oct","midi","freq","midiToFreq","tonicOf","Math","pow","parser","FNS","forEach","name","src","module","exports"],"sources":["/Users/macbook/Desktop/Music/OwnGuitar/node_modules/sample-player/node_modules/note-parser/index.js"],"sourcesContent":["'use strict'\n\nvar REGEX = /^([a-gA-G])(#{1,}|b{1,}|x{1,}|)(-?\\d*)\\s*(.*)\\s*$/\n/**\n * A regex for matching note strings in scientific notation.\n *\n * @name regex\n * @function\n * @return {RegExp} the regexp used to parse the note name\n *\n * The note string should have the form `letter[accidentals][octave][element]`\n * where:\n *\n * - letter: (Required) is a letter from A to G either upper or lower case\n * - accidentals: (Optional) can be one or more `b` (flats), `#` (sharps) or `x` (double sharps).\n * They can NOT be mixed.\n * - octave: (Optional) a positive or negative integer\n * - element: (Optional) additionally anything after the duration is considered to\n * be the element name (for example: 'C2 dorian')\n *\n * The executed regex contains (by array index):\n *\n * - 0: the complete string\n * - 1: the note letter\n * - 2: the optional accidentals\n * - 3: the optional octave\n * - 4: the rest of the string (trimmed)\n *\n * @example\n * var parser = require('note-parser')\n * parser.regex.exec('c#4')\n * // => ['c#4', 'c', '#', '4', '']\n * parser.regex.exec('c#4 major')\n * // => ['c#4major', 'c', '#', '4', 'major']\n * parser.regex().exec('CMaj7')\n * // => ['CMaj7', 'C', '', '', 'Maj7']\n */\nfunction regex () { return REGEX }\n\nvar SEMITONES = [0, 2, 4, 5, 7, 9, 11]\n/**\n * Parse a note name in scientific notation an return it's components,\n * and some numeric properties including midi number and frequency.\n *\n * @name parse\n * @function\n * @param {String} note - the note string to be parsed\n * @param {Boolean} isTonic - true if the note is the tonic of something.\n * If true, en extra tonicOf property is returned. It's false by default.\n * @param {Float} tunning - The frequency of A4 note to calculate frequencies.\n * By default it 440.\n * @return {Object} the parsed note name or null if not a valid note\n *\n * The parsed note name object will ALWAYS contains:\n * - letter: the uppercase letter of the note\n * - acc: the accidentals of the note (only sharps or flats)\n * - pc: the pitch class (letter + acc)\n * - step: s a numeric representation of the letter. It's an integer from 0 to 6\n * where 0 = C, 1 = D ... 6 = B\n * - alt: a numeric representation of the accidentals. 0 means no alteration,\n * positive numbers are for sharps and negative for flats\n * - chroma: a numeric representation of the pitch class. It's like midi for\n * pitch classes. 0 = C, 1 = C#, 2 = D ... It can have negative values: -1 = Cb.\n * Can detect pitch class enhramonics.\n *\n * If the note has octave, the parser object will contain:\n * - oct: the octave number (as integer)\n * - midi: the midi number\n * - freq: the frequency (using tuning parameter as base)\n *\n * If the parameter `isTonic` is set to true, the parsed object will contain:\n * - tonicOf: the rest of the string that follows note name (left and right trimmed)\n *\n * @example\n * var parse = require('note-parser').parse\n * parse('Cb4')\n * // => { letter: 'C', acc: 'b', pc: 'Cb', step: 0, alt: -1, chroma: -1,\n *         oct: 4, midi: 59, freq: 246.94165062806206 }\n * // if no octave, no midi, no freq\n * parse('fx')\n * // => { letter: 'F', acc: '##', pc: 'F##', step: 3, alt: 2, chroma: 7 })\n */\nfunction parse (str, isTonic, tuning) {\n  if (typeof str !== 'string') return null\n  var m = REGEX.exec(str)\n  if (!m || !isTonic && m[4]) return null\n\n  var p = { letter: m[1].toUpperCase(), acc: m[2].replace(/x/g, '##') }\n  p.pc = p.letter + p.acc\n  p.step = (p.letter.charCodeAt(0) + 3) % 7\n  p.alt = p.acc[0] === 'b' ? -p.acc.length : p.acc.length\n  p.chroma = SEMITONES[p.step] + p.alt\n  if (m[3]) {\n    p.oct = +m[3]\n    p.midi = p.chroma + 12 * (p.oct + 1)\n    p.freq = midiToFreq(p.midi, tuning)\n  }\n  if (isTonic) p.tonicOf = m[4]\n  return p\n}\n\n/**\n * Given a midi number, return its frequency\n * @param {Integer} midi - midi note number\n * @param {Float} tuning - (Optional) the A4 tuning (440Hz by default)\n * @return {Float} frequency in hertzs\n */\nfunction midiToFreq (midi, tuning) {\n  return Math.pow(2, (midi - 69) / 12) * (tuning || 440)\n}\n\nvar parser = { parse: parse, regex: regex, midiToFreq: midiToFreq }\nvar FNS = ['letter', 'acc', 'pc', 'step', 'alt', 'chroma', 'oct', 'midi', 'freq']\nFNS.forEach(function (name) {\n  parser[name] = function (src) {\n    var p = parse(src)\n    return p && (typeof p[name] !== 'undefined') ? p[name] : null\n  }\n})\n\nmodule.exports = parser\n\n// extra API docs\n/**\n * Get midi of a note\n *\n * @name midi\n * @function\n * @param {String} note - the note name\n * @return {Integer} the midi number of the note or null if not a valid note\n * or the note does NOT contains octave\n * @example\n * var parser = require('note-parser')\n * parser.midi('A4') // => 69\n * parser.midi('A') // => null\n */\n/**\n * Get freq of a note in hertzs (in a well tempered 440Hz A4)\n *\n * @name freq\n * @function\n * @param {String} note - the note name\n * @return {Float} the freq of the number if hertzs or null if not valid note\n * or the note does NOT contains octave\n * @example\n * var parser = require('note-parser')\n * parser.freq('A4') // => 440\n * parser.freq('A') // => null\n */\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}