{"ast":null,"code":"// index.ts\nimport { note as props, transpose as _tr } from \"@tonaljs/core\";\nimport { freqToMidi, midiToNoteName } from \"@tonaljs/midi\";\nvar NAMES = [\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\"];\nvar toName = n => n.name;\nvar onlyNotes = array => array.map(props).filter(n => !n.empty);\nfunction names(array) {\n  if (array === void 0) {\n    return NAMES.slice();\n  } else if (!Array.isArray(array)) {\n    return [];\n  } else {\n    return onlyNotes(array).map(toName);\n  }\n}\nvar get = props;\nvar name = note => get(note).name;\nvar pitchClass = note => get(note).pc;\nvar accidentals = note => get(note).acc;\nvar octave = note => get(note).oct;\nvar midi = note => get(note).midi;\nvar freq = note => get(note).freq;\nvar chroma = note => get(note).chroma;\nfunction fromMidi(midi2) {\n  return midiToNoteName(midi2);\n}\nfunction fromFreq(freq2) {\n  return midiToNoteName(freqToMidi(freq2));\n}\nfunction fromFreqSharps(freq2) {\n  return midiToNoteName(freqToMidi(freq2), {\n    sharps: true\n  });\n}\nfunction fromMidiSharps(midi2) {\n  return midiToNoteName(midi2, {\n    sharps: true\n  });\n}\nvar transpose = _tr;\nvar tr = _tr;\nvar transposeBy = interval => note => transpose(note, interval);\nvar trBy = transposeBy;\nvar transposeFrom = note => interval => transpose(note, interval);\nvar trFrom = transposeFrom;\nfunction transposeFifths(noteName, fifths) {\n  return transpose(noteName, [fifths, 0]);\n}\nvar trFifths = transposeFifths;\nfunction transposeOctaves(noteName, octaves) {\n  return transpose(noteName, [0, octaves]);\n}\nvar ascending = (a, b) => a.height - b.height;\nvar descending = (a, b) => b.height - a.height;\nfunction sortedNames(notes, comparator) {\n  comparator = comparator || ascending;\n  return onlyNotes(notes).sort(comparator).map(toName);\n}\nfunction sortedUniqNames(notes) {\n  return sortedNames(notes, ascending).filter((n, i, a) => i === 0 || n !== a[i - 1]);\n}\nvar simplify = noteName => {\n  const note = get(noteName);\n  if (note.empty) {\n    return \"\";\n  }\n  return midiToNoteName(note.midi || note.chroma, {\n    sharps: note.alt > 0,\n    pitchClass: note.midi === null\n  });\n};\nfunction enharmonic(noteName, destName) {\n  const src = get(noteName);\n  if (src.empty) {\n    return \"\";\n  }\n  const dest = get(destName || midiToNoteName(src.midi || src.chroma, {\n    sharps: src.alt < 0,\n    pitchClass: true\n  }));\n  if (dest.empty || dest.chroma !== src.chroma) {\n    return \"\";\n  }\n  if (src.oct === void 0) {\n    return dest.pc;\n  }\n  const srcChroma = src.chroma - src.alt;\n  const destChroma = dest.chroma - dest.alt;\n  const destOctOffset = srcChroma > 11 || destChroma < 0 ? -1 : srcChroma < 0 || destChroma > 11 ? 1 : 0;\n  const destOct = src.oct + destOctOffset;\n  return dest.pc + destOct;\n}\nvar note_default = {\n  names,\n  get,\n  name,\n  pitchClass,\n  accidentals,\n  octave,\n  midi,\n  ascending,\n  descending,\n  sortedNames,\n  sortedUniqNames,\n  fromMidi,\n  fromMidiSharps,\n  freq,\n  fromFreq,\n  fromFreqSharps,\n  chroma,\n  transpose,\n  tr,\n  transposeBy,\n  trBy,\n  transposeFrom,\n  trFrom,\n  transposeFifths,\n  transposeOctaves,\n  trFifths,\n  simplify,\n  enharmonic\n};\nexport { accidentals, ascending, chroma, note_default as default, descending, enharmonic, freq, fromFreq, fromFreqSharps, fromMidi, fromMidiSharps, get, midi, name, names, octave, pitchClass, simplify, sortedNames, sortedUniqNames, tr, trBy, trFifths, trFrom, transpose, transposeBy, transposeFifths, transposeFrom, transposeOctaves };","map":{"version":3,"mappings":"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","names":["note","props","transpose","_tr","freqToMidi","midiToNoteName","NAMES","toName","n","name","onlyNotes","array","map","filter","empty","names","slice","Array","isArray","get","pitchClass","pc","accidentals","acc","octave","oct","midi","freq","chroma","fromMidi","fromFreq","fromFreqSharps","sharps","fromMidiSharps","tr","transposeBy","interval","trBy","transposeFrom","trFrom","transposeFifths","noteName","fifths","trFifths","transposeOctaves","octaves","ascending","a","b","height","descending","sortedNames","notes","comparator","sort","sortedUniqNames","i","simplify","alt","enharmonic","destName","src","dest","srcChroma","destChroma","destOctOffset","destOct","note_default"],"sources":["/Users/macbook/Desktop/Music/OwnGuitar/node_modules/@tonaljs/note/index.ts"],"sourcesContent":["import {\n  IntervalName,\n  Named,\n  Note,\n  note as props,\n  NoteLiteral,\n  NoteName,\n  Pitch,\n  transpose as _tr,\n} from \"@tonaljs/core\";\nimport { freqToMidi, midiToNoteName } from \"@tonaljs/midi\";\n\nconst NAMES = [\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\"];\n\nconst toName = (n: Named) => n.name;\nconst onlyNotes = (array: any[]) =>\n  array.map(props).filter((n) => !n.empty) as Note[];\n\n/**\n * Return the natural note names without octave\n * @function\n * @example\n * Note.names(); // => [\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\"]\n */\nexport function names(array?: any[]): string[] {\n  if (array === undefined) {\n    return NAMES.slice();\n  } else if (!Array.isArray(array)) {\n    return [];\n  } else {\n    return onlyNotes(array).map(toName);\n  }\n}\n\n/**\n * Get a note from a note name\n *\n * @function\n * @example\n * Note.get('Bb4') // => { name: \"Bb4\", midi: 70, chroma: 10, ... }\n */\nexport const get = props;\n\n/**\n * Get the note name\n * @function\n */\nexport const name = (note: NoteLiteral) => get(note).name;\n\n/**\n * Get the note pitch class name\n * @function\n */\nexport const pitchClass = (note: NoteLiteral) => get(note).pc;\n\n/**\n * Get the note accidentals\n * @function\n */\nexport const accidentals = (note: NoteLiteral) => get(note).acc;\n\n/**\n * Get the note octave\n * @function\n */\nexport const octave = (note: NoteLiteral) => get(note).oct;\n\n/**\n * Get the note midi\n * @function\n */\nexport const midi = (note: NoteLiteral) => get(note).midi;\n\n/**\n * Get the note midi\n * @function\n */\nexport const freq = (note: NoteLiteral) => get(note).freq;\n\n/**\n * Get the note chroma\n * @function\n */\nexport const chroma = (note: NoteLiteral) => get(note).chroma;\n\n/**\n * Given a midi number, returns a note name. Uses flats for altered notes.\n *\n * @function\n * @param {number} midi - the midi note number\n * @return {string} the note name\n * @example\n * Note.fromMidi(61) // => \"Db4\"\n * Note.fromMidi(61.7) // => \"D4\"\n */\nexport function fromMidi(midi: number) {\n  return midiToNoteName(midi);\n}\n\n/**\n * Given a midi number, returns a note name. Uses flats for altered notes.\n */\nexport function fromFreq(freq: number) {\n  return midiToNoteName(freqToMidi(freq));\n}\n/**\n * Given a midi number, returns a note name. Uses flats for altered notes.\n */\nexport function fromFreqSharps(freq: number) {\n  return midiToNoteName(freqToMidi(freq), { sharps: true });\n}\n\n/**\n * Given a midi number, returns a note name. Uses flats for altered notes.\n *\n * @function\n * @param {number} midi - the midi note number\n * @return {string} the note name\n * @example\n * Note.fromMidiSharps(61) // => \"C#4\"\n */\n\nexport function fromMidiSharps(midi: number) {\n  return midiToNoteName(midi, { sharps: true });\n}\n\n/**\n * Transpose a note by an interval\n */\nexport const transpose = _tr;\nexport const tr = _tr;\n\n/**\n * Transpose by an interval.\n * @function\n * @param {string} interval\n * @return {function} a function that transposes by the given interval\n * @example\n * [\"C\", \"D\", \"E\"].map(Note.transposeBy(\"5P\"));\n * // => [\"G\", \"A\", \"B\"]\n */\nexport const transposeBy = (interval: IntervalName) => (note: NoteName) =>\n  transpose(note, interval);\nexport const trBy = transposeBy;\n\n/**\n * Transpose from a note\n * @function\n * @param {string} note\n * @return {function}  a function that transposes the the note by an interval\n * [\"1P\", \"3M\", \"5P\"].map(Note.transposeFrom(\"C\"));\n * // => [\"C\", \"E\", \"G\"]\n */\nexport const transposeFrom = (note: NoteName) => (interval: IntervalName) =>\n  transpose(note, interval);\nexport const trFrom = transposeFrom;\n\n/**\n * Transpose a note by a number of perfect fifths.\n *\n * @function\n * @param {string} note - the note name\n * @param {number} fifhts - the number of fifths\n * @return {string} the transposed note name\n *\n * @example\n * import { transposeFifths } from \"@tonaljs/note\"\n * transposeFifths(\"G4\", 1) // => \"D\"\n * [0, 1, 2, 3, 4].map(fifths => transposeFifths(\"C\", fifths)) // => [\"C\", \"G\", \"D\", \"A\", \"E\"]\n */\nexport function transposeFifths(noteName: NoteName, fifths: number): NoteName {\n  return transpose(noteName, [fifths, 0]);\n}\nexport const trFifths = transposeFifths;\n\n// TODO: documentation\nexport function transposeOctaves(\n  noteName: NoteName,\n  octaves: number\n): NoteName {\n  return transpose(noteName, [0, octaves]);\n}\n\nexport type NoteComparator = (a: Note, b: Note) => number;\n\nexport const ascending: NoteComparator = (a, b) => a.height - b.height;\nexport const descending: NoteComparator = (a, b) => b.height - a.height;\n\nexport function sortedNames(\n  notes: any[],\n  comparator?: NoteComparator\n): string[] {\n  comparator = comparator || ascending;\n  return onlyNotes(notes).sort(comparator).map(toName);\n}\n\nexport function sortedUniqNames(notes: any[]): string[] {\n  return sortedNames(notes, ascending).filter(\n    (n, i, a) => i === 0 || n !== a[i - 1]\n  );\n}\n\n/**\n * Simplify a note\n *\n * @function\n * @param {string} note - the note to be simplified\n * - sameAccType: default true. Use same kind of accidentals that source\n * @return {string} the simplified note or '' if not valid note\n * @example\n * simplify(\"C##\") // => \"D\"\n * simplify(\"C###\") // => \"D#\"\n * simplify(\"C###\")\n * simplify(\"B#4\") // => \"C5\"\n */\nexport const simplify = (noteName: NoteName | Pitch): string => {\n  const note = get(noteName);\n  if (note.empty) {\n    return \"\";\n  }\n  return midiToNoteName(note.midi || note.chroma, {\n    sharps: note.alt > 0,\n    pitchClass: note.midi === null,\n  });\n};\n/**\n * Get enharmonic of a note\n *\n * @function\n * @param {string} note\n * @param [string] - [optional] Destination pitch class\n * @return {string} the enharmonic note name or '' if not valid note\n * @example\n * Note.enharmonic(\"Db\") // => \"C#\"\n * Note.enharmonic(\"C\") // => \"C\"\n * Note.enharmonic(\"F2\",\"E#\") // => \"E#2\"\n */\nexport function enharmonic(noteName: string, destName?: string) {\n  const src = get(noteName);\n  if (src.empty) {\n    return \"\";\n  }\n\n  // destination: use given or generate one\n  const dest = get(\n    destName ||\n      midiToNoteName(src.midi || src.chroma, {\n        sharps: src.alt < 0,\n        pitchClass: true,\n      })\n  );\n\n  // ensure destination is valid\n  if (dest.empty || dest.chroma !== src.chroma) {\n    return \"\";\n  }\n\n  // if src has no octave, no need to calculate anything else\n  if (src.oct === undefined) {\n    return dest.pc;\n  }\n\n  // detect any octave overflow\n  const srcChroma = src.chroma - src.alt;\n  const destChroma = dest.chroma - dest.alt;\n  const destOctOffset =\n    srcChroma > 11 || destChroma < 0\n      ? -1\n      : srcChroma < 0 || destChroma > 11\n      ? +1\n      : 0;\n  // calculate the new octave\n  const destOct = src.oct + destOctOffset;\n  return dest.pc + destOct;\n}\n\nexport default {\n  names,\n  get,\n  name,\n  pitchClass,\n  accidentals,\n  octave,\n  midi,\n  ascending,\n  descending,\n  sortedNames,\n  sortedUniqNames,\n  fromMidi,\n  fromMidiSharps,\n  freq,\n  fromFreq,\n  fromFreqSharps,\n  chroma,\n  transpose,\n  tr,\n  transposeBy,\n  trBy,\n  transposeFrom,\n  trFrom,\n  transposeFifths,\n  transposeOctaves,\n  trFifths,\n  simplify,\n  enharmonic,\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}