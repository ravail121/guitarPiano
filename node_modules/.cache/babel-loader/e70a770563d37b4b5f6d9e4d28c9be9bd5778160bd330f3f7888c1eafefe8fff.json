{"ast":null,"code":"import { MidSideEffect } from \"../effect/MidSideEffect\";\nimport { Signal } from \"../signal/Signal\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { Subtract } from \"../signal/Subtract\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { connect } from \"../core/context/ToneAudioNode\";\n/**\n * Applies a width factor to the mid/side seperation.\n * 0 is all mid and 1 is all side.\n * Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).\n * ```\n * Mid *= 2*(1-width)<br>\n * Side *= 2*width\n * ```\n * @category Effect\n */\nexport class StereoWidener extends MidSideEffect {\n  constructor() {\n    super(optionsFromArguments(StereoWidener.getDefaults(), arguments, [\"width\"]));\n    this.name = \"StereoWidener\";\n    const options = optionsFromArguments(StereoWidener.getDefaults(), arguments, [\"width\"]);\n    this.width = new Signal({\n      context: this.context,\n      value: options.width,\n      units: \"normalRange\"\n    });\n    readOnly(this, [\"width\"]);\n    this._twoTimesWidthMid = new Multiply({\n      context: this.context,\n      value: 2\n    });\n    this._twoTimesWidthSide = new Multiply({\n      context: this.context,\n      value: 2\n    });\n    this._midMult = new Multiply({\n      context: this.context\n    });\n    this._twoTimesWidthMid.connect(this._midMult.factor);\n    this.connectEffectMid(this._midMult);\n    this._oneMinusWidth = new Subtract({\n      context: this.context\n    });\n    this._oneMinusWidth.connect(this._twoTimesWidthMid);\n    connect(this.context.getConstant(1), this._oneMinusWidth);\n    this.width.connect(this._oneMinusWidth.subtrahend);\n    this._sideMult = new Multiply({\n      context: this.context\n    });\n    this.width.connect(this._twoTimesWidthSide);\n    this._twoTimesWidthSide.connect(this._sideMult.factor);\n    this.connectEffectSide(this._sideMult);\n  }\n  static getDefaults() {\n    return Object.assign(MidSideEffect.getDefaults(), {\n      width: 0.5\n    });\n  }\n  dispose() {\n    super.dispose();\n    this.width.dispose();\n    this._midMult.dispose();\n    this._sideMult.dispose();\n    this._twoTimesWidthMid.dispose();\n    this._twoTimesWidthSide.dispose();\n    this._oneMinusWidth.dispose();\n    return this;\n  }\n}","map":{"version":3,"mappings":"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","names":["MidSideEffect","Signal","Multiply","Subtract","optionsFromArguments","readOnly","connect","StereoWidener","constructor","getDefaults","arguments","options","width","context","value","units","_twoTimesWidthMid","_twoTimesWidthSide","_midMult","factor","connectEffectMid","_oneMinusWidth","getConstant","subtrahend","_sideMult","connectEffectSide","Object","assign","dispose"],"sources":["/Users/macbook/Desktop/Music/OwnGuitar/node_modules/tone/Tone/effect/StereoWidener.ts"],"sourcesContent":["import { MidSideEffect, MidSideEffectOptions } from \"../effect/MidSideEffect\";\nimport { Signal } from \"../signal/Signal\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { Subtract } from \"../signal/Subtract\";\nimport { NormalRange } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { connect } from \"../core/context/ToneAudioNode\";\n\nexport interface StereoWidenerOptions extends MidSideEffectOptions {\n\twidth: NormalRange;\n}\n\n/**\n * Applies a width factor to the mid/side seperation.\n * 0 is all mid and 1 is all side.\n * Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).\n * ```\n * Mid *= 2*(1-width)<br>\n * Side *= 2*width\n * ```\n * @category Effect\n */\nexport class StereoWidener extends MidSideEffect<StereoWidenerOptions> {\n\n\treadonly name: string = \"StereoWidener\";\n\n\t/**\n\t * The width control. 0 = 100% mid. 1 = 100% side. 0.5 = no change.\n\t */\n\treadonly width: Signal<\"normalRange\">;\n\t\n\t/**\n\t * Two times the (1-width) for the mid channel\n\t */\n\tprivate _twoTimesWidthMid: Multiply;\n\t\n\t/**\n\t * Two times the width for the side channel\n\t */\n\tprivate _twoTimesWidthSide: Multiply;\n\t\n\t/**\n\t * Mid multiplier\n\t */\n\tprivate _midMult: Multiply;\n\t\n\t/**\n\t * 1 - width\n\t */\n\tprivate _oneMinusWidth: Subtract;\n\t\n\t/**\n\t * Side multiplier\n\t */\n\tprivate _sideMult: Multiply;\n\n\t/**\n\t * @param width The stereo width. A width of 0 is mono and 1 is stereo. 0.5 is no change.\n\t */\n\tconstructor(width?: NormalRange);\n\tconstructor(options?: Partial<StereoWidenerOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(StereoWidener.getDefaults(), arguments, [\"width\"]));\n\t\tconst options = optionsFromArguments(StereoWidener.getDefaults(), arguments, [\"width\"]);\n\t\tthis.width = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.width,\n\t\t\tunits: \"normalRange\",\n\t\t});\n\t\treadOnly(this, [\"width\"]);\n\t\tthis._twoTimesWidthMid = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tvalue: 2,\n\t\t});\n\t\tthis._twoTimesWidthSide = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tvalue: 2,\n\t\t});\n\t\tthis._midMult = new Multiply({ context: this.context });\n\t\tthis._twoTimesWidthMid.connect(this._midMult.factor);\n\t\tthis.connectEffectMid(this._midMult);\n\n\t\tthis._oneMinusWidth = new Subtract({ context: this.context });\n\t\tthis._oneMinusWidth.connect(this._twoTimesWidthMid);\n\t\tconnect(this.context.getConstant(1), this._oneMinusWidth);\n\t\tthis.width.connect(this._oneMinusWidth.subtrahend);\n\n\t\tthis._sideMult = new Multiply({ context: this.context });\n\t\tthis.width.connect(this._twoTimesWidthSide);\n\t\tthis._twoTimesWidthSide.connect(this._sideMult.factor);\n\t\tthis.connectEffectSide(this._sideMult);\n\t}\n\n\tstatic getDefaults(): StereoWidenerOptions {\n\t\treturn Object.assign(MidSideEffect.getDefaults(), {\n\t\t\twidth: 0.5,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.width.dispose();\n\t\tthis._midMult.dispose();\n\t\tthis._sideMult.dispose();\n\t\tthis._twoTimesWidthMid.dispose();\n\t\tthis._twoTimesWidthSide.dispose();\n\t\tthis._oneMinusWidth.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}