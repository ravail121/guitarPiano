import { css, jsx } from '@emotion/react';
import { useLayoutEffect as useLayoutEffect$1, useEffect, useMemo, useRef, useState, Fragment } from 'react';
import range from 'lodash.range';
import uniqueId from 'lodash.uniqueid';
import classNames from 'classnames';
import { get, fromMidiSharps } from '@tonaljs/note';
import { fromSemitones } from '@tonaljs/interval';
import color from 'color';
import { getKey } from 'keyboard-key';

var useLayoutEffect = typeof window !== 'undefined' ? useLayoutEffect$1 : useEffect;

function set(array, pos, item) {
  var newArray = array.slice(0);
  newArray[pos] = item;
  return newArray;
}

var makeTheme = function makeTheme(theme) {
  return theme;
};

var spanishTheme = /*#__PURE__*/makeTheme({
  description: 'A typical Spanish guitar with a brown fretboard and golden details',
  color: '#333333',
  nut: {
    color: '#fffacd'
  },
  fret: {
    color: '#9e6429',
    separator: {
      color: '#daa520',
      shadow: true
    },
    counter: {
      color: '#606c76'
    }
  },
  string: {
    color: function color() {
      return '#eeeeee';
    }
  },
  finger: {
    text: {
      color: '#606c76'
    },
    color: 'white'
  }
});

/** @jsxRuntime classic */

var sw = function sw(theme) {
  return theme.fret.separator.width === 'md' ? 0.7 : 0.3;
};

var stringHeight = 3.33125;
var getStyles = (function (theme) {
  return css({
    fontFamily: "'Roboto', 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
    position: 'relative',
    boxSizing: 'border-box',
    maxWidth: '100%',
    overflowY: 'auto',
    borderTopColor: theme.color,
    borderTopStyle: 'solid',
    borderTopWidth: '0.5em',
    overscrollBehaviorX: 'none',
    background: theme.color,
    WebkitTapHighlightColor: 'rgba(0, 0, 0, 0)',
    '&.lefty': {
      direction: 'rtl',
      '.marker': {
        transform: 'scale(-1, 1)'
      },
      '.mute': {
        left: 'auto',
        right: 0
      }
    },
    '*, *::before, *::after': {
      boxSizing: 'border-box'
    },
    '.frets': {
      display: 'flex',
      position: 'relative',
      '.fret': {
        width: '10em',
        flexShrink: 0,
        position: 'relative',
        '&.nut,&.mute': {
          width: '7em'
        },
        '&.mute': {
          position: 'absolute',
          top: 0,
          left: 0
        }
      }
    },
    '.frame': {
      height: '2em',
      '.counter': {
        fontWeight: 'bold',
        color: theme.fret.counter.color
      },
      '.fret': {
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        background: theme.color
      }
    },
    '.strings': {
      display: 'flex',
      flexDirection: 'column',
      justifyContent: 'center',
      position: 'relative',
      minHeight: stringHeight * 3 + "em",
      '.string': {
        margin: 0,
        padding: 0,
        border: 'none',
        '.fret': {
          display: 'flex',
          alignItems: 'center',
          '.actual-string': {
            transition: 'opacity ease-in-out 0.1s',
            content: '""',
            width: '100%',
            height: '0.65em',
            position: 'absolute',
            left: '0'
          },
          label: {
            fontSize: '1em',
            width: '100%',
            height: stringHeight + "em",
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            margin: 0
          },
          '&:hover input:not(:disabled):not(:checked) ~ .finger': {
            opacity: 0.5
          },
          'input:not(:disabled)': {
            height: '100%',
            width: '100%'
          },
          'input:not(:disabled),input:not(:disabled) ~ .finger': {
            cursor: 'pointer'
          },
          input: {
            position: 'absolute',
            margin: 0,
            opacity: 0,
            '&:checked ~ .finger': {
              opacity: 1
            },
            '&:focus:not(:disabled) ~ .finger': {
              boxShadow: '0 0 0 0.2em rgba(66, 153, 225, 0.5)'
            }
          },
          '&.mute': {
            'input:checked ~ .finger': {
              opacity: 0
            },
            'input:focus ~ .finger,&:hover input:checked ~ .finger': {
              opacity: 0.5
            }
          }
        }
      }
    },
    '.fretboard': {
      position: 'absolute',
      left: '0',
      right: '0',
      top: '0',
      bottom: '0',
      '.fret': {
        display: 'flex',
        flexDirection: 'row-reverse',
        alignItems: 'center',
        justifyContent: 'end',
        backgroundColor: theme.fret.color,
        '&.nut': {
          backgroundColor: theme.nut.color
        },
        '&:not(.nut)::before': {
          content: '""',
          position: 'absolute',
          top: '0',
          bottom: '0',
          width: sw(theme) + "em",
          backgroundColor: theme.fret.separator.color,
          borderRight: theme.fret.separator.shadow ? "solid " + sw(theme) / 2 + "em " + color(theme.fret.separator.color).darken(0.1) : 0,
          borderRadius: theme.fret.separator.radius ? '3px' : 0,
          display: 'inline-block'
        },
        '.marker': {
          position: 'absolute',
          left: '0',
          right: '0',
          top: '0',
          bottom: '0',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center'
        }
      }
    },
    '.finger': {
      color: theme.finger.text.color,
      transition: 'opacity ease-in-out 0.1s',
      background: theme.finger.color,
      width: '5em',
      padding: '0',
      height: 3.5 / 1.5 + "em",
      borderRadius: '20px',
      borderBottom: "solid 0.2em " + color(theme.finger.color).darken(0.35),
      boxShadow: '0 1px 2px rgba(0, 0, 0, 0.16), 0 1px 2px rgba(0, 0, 0, 0.23)',
      fontWeight: 'bold',
      opacity: 0,
      display: 'inline-flex',
      alignItems: 'center',
      justifyContent: 'center',
      position: 'relative'
    },
    '.sr-only': {
      position: 'absolute',
      width: '1px',
      height: '1px',
      padding: 0,
      margin: '-1px',
      overflow: 'hidden',
      clip: 'rect(0, 0, 0, 0)',
      whiteSpace: 'nowrap',
      borderWidth: 0
    }
  });
});

/** @jsx jsx */
function getRenderFingerSpn(tuning) {
  return function (string, fret) {
    var _get = get(fromMidiSharps(tuning[string] + fret)),
        letter = _get.letter,
        acc = _get.acc,
        oct = _get.oct;

    return jsx("span", null, letter, acc === '#' ? 'â™¯' : acc === 'b' ? 'â™­' : '', jsx("sub", {
      "aria-label": "octave " + oct
    }, oct));
  };
}

var mod = function mod(n, m) {
  return (m + n % m) % m;
};

function getRenderFingerRelative(tuning, root) {
  return function (string, fret) {
    return jsx(Fragment, null, range(12).map(fromSemitones)[mod(tuning[string] + fret - root, 12)]);
  };
}

function Frets(props) {
  var _props$frets = props.frets,
      from = _props$frets.from,
      amount = _props$frets.amount;
  return jsx("div", {
    className: classNames(props.className, 'frets'),
    onMouseEnter: props.onMouseEnter
  }, props.currentFret !== undefined && jsx("div", {
    className: "fret mute",
    style: {
      zIndex: props.currentFret === -1 ? 1 : undefined
    }
  }, props.children == null ? void 0 : props.children(-1)), range(from, from + amount + 1).map(function (fret) {
    return jsx("div", {
      className: classNames('fret', {
        nut: fret === 0
      }),
      key: fret
    }, props.children == null ? void 0 : props.children(fret));
  }));
}

function Guitar(props) {
  var _props$strings = props.strings,
      strings = _props$strings === void 0 ? [] : _props$strings,
      _props$frets2 = props.frets,
      frets = _props$frets2 === void 0 ? {
    from: 0,
    amount: 22
  } : _props$frets2,
      _props$lefty = props.lefty,
      lefty = _props$lefty === void 0 ? false : _props$lefty,
      _props$center = props.center,
      center = _props$center === void 0 ? false : _props$center,
      renderFinger = props.renderFinger,
      _props$theme = props.theme,
      theme = _props$theme === void 0 ? spanishTheme : _props$theme,
      playOnHover = props.playOnHover;
  var id = useMemo(function () {
    return props.id || uniqueId('guitar-');
  }, [props.id]);
  var styles = useMemo(function () {
    return getStyles(theme);
  }, [theme]);
  var ref = useRef(null);

  var focusString = function focusString(string, fret) {
    var _ref$current, _ref$current$querySel;

    if (fret === void 0) {
      fret = strings[string];
    }

    return (_ref$current = ref.current) == null ? void 0 : _ref$current.querySelector == null ? void 0 : (_ref$current$querySel = _ref$current.querySelector("input[name=\"" + id + "-string-" + string + "\"][value=\"" + fret + "\"]")) == null ? void 0 : _ref$current$querySel.focus();
  };

  var releaseString = function releaseString(string) {
    return pressString(string, strings[string] === 0 ? -1 : 0);
  };

  var pressString = function pressString(string, fret) {
    focusString(string, fret);
    props.onChange == null ? void 0 : props.onChange(set(strings, string, fret));
  };

  var getNavigationDelta = function getNavigationDelta(e) {
    switch (getKey(e)) {
      case 'ArrowDown':
        return {
          x: 0,
          y: 1
        };

      case 'ArrowUp':
        return {
          x: 0,
          y: -1
        };

      case 'ArrowRight':
        return {
          x: lefty ? -1 : 1,
          y: 0
        };

      case 'ArrowLeft':
        return {
          x: lefty ? 1 : -1,
          y: 0
        };

      default:
        return null;
    }
  };

  useLayoutEffect(function () {
    var fretsNode = ref.current;

    if (center && fretsNode) {
      var children = fretsNode.querySelectorAll('.fret');
      var pressedFrets = strings.filter(function (fret) {
        return fret > 0;
      });
      var minFret = Math.min.apply(Math, pressedFrets);
      var maxFret = Math.max.apply(Math, pressedFrets);
      var toFret = minFret + Math.floor((maxFret - minFret) / 2);
      var fretNode = children[toFret];

      if (fretNode) {
        fretsNode.scrollLeft = fretNode.offsetLeft - fretsNode.offsetWidth / 2 + fretNode.offsetWidth / 2;
      }
    }
  }, [ref, strings, center, lefty]);

  var _useState = useState(0),
      focusedString = _useState[0],
      setFocusedString = _useState[1];

  return jsx("div", {
    id: id,
    ref: ref,
    css: styles,
    className: classNames('guitar', {
      lefty: lefty
    }, props.className),
    onKeyDown: function onKeyDown(e) {
      var delta = getNavigationDelta(e.nativeEvent);

      if (delta) {
        var string = mod(focusedString + delta.y, strings.length);
        var fret = strings[string] + delta.x;
        pressString(string, fret > frets.from + frets.amount ? -1 : fret < -1 ? frets.from + frets.amount : fret);
        e.preventDefault();
      }
    }
  }, jsx("div", {
    className: "sr-only"
  }, "This is a guitar with ", strings.length, " strings and ", frets.amount, " frets, starting from ", frets.from, ". Its theme describes it as:", ' ', theme.description, ".", props.onChange && jsx("span", null, "Once you focus on a string you will be able to navigate strings and frets using the arrow keys."), props.onPlay && jsx("span", null, "When a specific string is focused you can play it by pressing 'p'.")), jsx("div", {
    className: "sr-only",
    role: "status"
  }, "Current fretting: ", strings.join(', '), "."), jsx("div", {
    className: "strings"
  }, jsx(Frets, {
    className: "fretboard",
    frets: frets
  }, theme.fret.marker ? function (fret) {
    return jsx("div", {
      className: "marker"
    }, theme.fret.marker == null ? void 0 : theme.fret.marker(fret));
  } : undefined), strings.map(function (currentFret, string) {
    return jsx("fieldset", {
      key: string,
      className: "string"
    }, jsx("legend", {
      className: "sr-only"
    }, "String ", string + 1, ".", ' ', currentFret === -1 && 'This string is muted.'), jsx(Frets, {
      currentFret: currentFret,
      frets: frets,
      onMouseEnter: function onMouseEnter() {
        return playOnHover && (props.onPlay == null ? void 0 : props.onPlay(string));
      }
    }, function (fret) {
      return jsx("label", null, jsx("span", {
        className: "sr-only"
      }, "Fret ", fret, " ", fret === -1 && '(Mute)', "."), fret >= 0 && jsx("span", {
        className: "actual-string",
        style: {
          opacity: currentFret === -1 ? 0.2 : 1,
          borderBottom: "solid 0.2em " + color(theme.string.color(string)).darken(0.35),
          backgroundColor: theme.string.color(string)
        }
      }), jsx("input", {
        disabled: !props.onChange,
        type: "radio",
        name: id + "-string-" + string,
        value: fret,
        checked: currentFret === fret,
        onChange: function onChange(e) {
          props.onChange == null ? void 0 : props.onChange(set(strings, string, fret));
          e.target.focus();
        },
        onClick: function onClick() {
          return fret === currentFret && releaseString(string);
        },
        onKeyDown: function onKeyDown(e) {
          switch (e.keyCode) {
            case 80:
              props.onPlay == null ? void 0 : props.onPlay(string);
              break;

            case 13:
              releaseString(string);
              e.preventDefault();
          }
        },
        onFocus: function onFocus() {
          return setFocusedString(string);
        }
      }), jsx("span", {
        className: "finger"
      }, renderFinger == null ? void 0 : renderFinger(string, fret === -1 ? 0 : fret)));
    }));
  })), jsx(Frets, {
    className: "frame",
    frets: frets
  }, function (fret) {
    return fret !== 0 ? jsx("span", {
      className: "counter"
    }, fret) : null;
  }));
}

export default Guitar;
export { getRenderFingerRelative, getRenderFingerSpn, spanishTheme };
//# sourceMappingURL=react-guitar.esm.js.map
